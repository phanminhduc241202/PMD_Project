#include "config/rnet_config.h"
//void printMat(hls::stream<float>& input, int filter, int out_size){
//	for(int i = 0 ; i < filter; i++){
//		for(int j = 0; j < out_size; j++){
//			for(int k = 0 ; k < out_size; k++){
//				std::cout << input.read();
//				std::cout << ",\t";
//			}
//			std::cout << std::endl;
//		}
//		std::cout << std::endl;
//	}
//}
////
//void printMatArr(float* input, int filter, int out_size){
//	for(int i = 0 ; i < filter; i++){
//		for(int j = 0; j < out_size; j++){
//			for(int k = 0 ; k < out_size; k++){
//				std::cout << input[i * out_size * out_size + j * out_size + k];
//				std::cout << ",\t";
//			}
//			std::cout << std::endl;
//		}
//		std::cout << std::endl;
//	}
//}
float relu(float input){
	return (input > 0) ? input : 0;
}

float prelu(float input, float alpha){
    return (input >= 0) ? input : alpha * input;
}

float sigmoid(float input){
	return 1 / (1 + hls::exp(-input));
}

void stream2arr(hls::stream<float>& inStream, float* out, int size){
	for(int i = 0 ; i < size; i++){
		out[i] = inStream.read();
	}
	return;
}

void arr2stream(float* inArr, hls::stream<float>& outStream, int size){
	for(int i = 0; i < size; i++){
		outStream.write(inArr[i]);
	}
	return;
}


void duplicateArray(float* input, float* output1, float* output2, const int inSize){
	for(int i = 0; i < inSize; i++){
		output1[i] = input[i];
		output2[i] = input[i];
	}
	return;
}

void conv_1_accel(hls::stream<float>& input, hls::stream<float>& output){
//#pragma HLS INLINE off
	float weights[432] = {
		0.121169, 	0.147572, 	0.087927, 
		-0.058751, 	-0.052617, 	-0.067816, 
		-0.063299, 	0.094318, 	0.106145, 

		0.009697, 	-0.100520, 	-0.173303, 
		-0.110173, 	0.010225, 	-0.220636, 
		-0.209499, 	-0.090008, 	-0.078372, 

		-0.202008, 	-0.128680, 	0.028001, 
		-0.136110, 	0.038226, 	-0.165269, 
		-0.142055, 	-0.158426, 	0.035077, 


		-0.119598, 	-0.114648, 	-0.171612, 
		-0.113736, 	-0.155121, 	-0.097081, 
		-0.032721, 	0.035569, 	-0.093685, 

		0.084384, 	-0.119253, 	0.054033, 
		-0.068575, 	0.065094, 	-0.156964, 
		0.070604, 	-0.053255, 	-0.109350, 

		-0.180421, 	-0.163644, 	-0.065365, 
		0.033621, 	-0.105676, 	-0.002211, 
		0.050644, 	-0.113474, 	-0.007161, 


		0.096718, 	-0.138506, 	0.065285, 
		0.098298, 	0.165927, 	0.020010, 
		0.234500, 	-0.168553, 	-0.105062, 

		-0.078766, 	-0.131933, 	0.023989, 
		-0.126082, 	0.042810, 	0.239579, 
		0.172426, 	-0.195465, 	0.066791, 

		-0.212114, 	-0.122084, 	-0.100696, 
		-0.138348, 	-0.189876, 	0.028994, 
		0.179334, 	-0.233339, 	0.092604, 


		0.137789, 	0.042650, 	0.254228, 
		0.205383, 	0.234296, 	0.170771, 
		0.027534, 	0.200678, 	-0.015213, 

		0.268720, 	0.222365, 	0.295679, 
		0.154928, 	0.067076, 	0.051182, 
		0.111266, 	0.148868, 	0.094431, 

		0.119924, 	0.222852, 	0.052719, 
		0.275488, 	0.209826, 	0.218131, 
		0.177999, 	0.209146, 	0.251430, 


		-0.103917, 	-0.098573, 	-0.012418, 
		-0.249620, 	-0.153527, 	-0.205892, 
		-0.123252, 	-0.181253, 	-0.057314, 

		-0.002222, 	-0.076227, 	-0.006303, 
		0.036441, 	0.115465, 	-0.137351, 
		-0.100390, 	-0.041709, 	-0.162554, 

		-0.111835, 	-0.040435, 	-0.088731, 
		-0.118375, 	-0.169604, 	-0.044897, 
		-0.122236, 	-0.049414, 	-0.191496, 


		-0.157339, 	0.132845, 	0.254514, 
		-0.034465, 	0.031672, 	-0.028243, 
		0.078698, 	0.180150, 	0.189868, 

		-0.079441, 	-0.085260, 	0.094119, 
		-0.137855, 	-0.030186, 	-0.003937, 
		0.053951, 	-0.049578, 	0.098532, 

		-0.185407, 	-0.093597, 	0.193688, 
		0.057495, 	-0.086695, 	-0.122073, 
		0.055422, 	0.101505, 	-0.151629, 


		0.054083, 	-0.039442, 	-0.044505, 
		-0.029467, 	0.107663, 	-0.192365, 
		-0.047315, 	-0.074756, 	-0.147874, 

		0.008393, 	-0.046974, 	0.015419, 
		-0.062146, 	0.047952, 	-0.158155, 
		-0.098213, 	0.038286, 	-0.021535, 

		-0.032759, 	0.083718, 	-0.177256, 
		-0.041046, 	0.145493, 	-0.028883, 
		0.145555, 	-0.129641, 	-0.130578, 


		-0.079668, 	-0.187685, 	-0.069485, 
		0.178818, 	0.072258, 	-0.125028, 
		0.018128, 	0.078013, 	0.138601, 

		-0.124360, 	0.041412, 	0.004925, 
		-0.022062, 	0.060858, 	-0.110396, 
		0.034161, 	0.065756, 	-0.048870, 

		0.113138, 	-0.137392, 	-0.178351, 
		-0.054417, 	-0.013144, 	0.104009, 
		0.075455, 	-0.052922, 	0.032596, 


		-0.100181, 	-0.094155, 	0.067928, 
		-0.329064, 	0.089243, 	-0.089279, 
		-0.268952, 	0.042000, 	0.118228, 

		0.050381, 	-0.126205, 	0.271088, 
		-0.152653, 	0.137480, 	0.084886, 
		-0.286639, 	0.190043, 	0.057243, 

		0.101312, 	0.087818, 	0.178171, 
		-0.270682, 	0.118746, 	0.018608, 
		-0.222519, 	0.197849, 	-0.011792, 


		0.060044, 	0.069704, 	0.147510, 
		0.038323, 	-0.052606, 	-0.077169, 
		0.099545, 	-0.068453, 	0.165515, 

		-0.009163, 	0.093647, 	-0.152691, 
		-0.057907, 	0.082906, 	0.059197, 
		-0.113685, 	-0.025615, 	0.073436, 

		0.013088, 	-0.077137, 	-0.118261, 
		0.102445, 	0.048422, 	0.147045, 
		0.059065, 	0.152184, 	0.043062, 


		0.053952, 	0.032229, 	0.117495, 
		0.050431, 	0.232263, 	0.114501, 
		0.004871, 	0.219221, 	0.056601, 

		0.006810, 	-0.060033, 	0.085008, 
		-0.134018, 	0.229341, 	0.256300, 
		0.141660, 	0.228628, 	0.159713, 

		-0.118175, 	0.144233, 	0.011771, 
		-0.113203, 	0.204543, 	0.256081, 
		-0.082113, 	0.112662, 	0.134008, 


		-0.047675, 	-0.213187, 	-0.078550, 
		0.021957, 	-0.060059, 	-0.031350, 
		0.200653, 	0.109403, 	0.044389, 

		-0.180969, 	-0.199225, 	-0.077365, 
		0.092006, 	-0.075556, 	0.028536, 
		0.008087, 	0.219961, 	-0.011592, 

		-0.043350, 	-0.123339, 	-0.027022, 
		-0.112604, 	-0.170661, 	-0.190959, 
		0.048592, 	-0.068755, 	-0.098966, 


		-0.263193, 	-0.155133, 	-0.182725, 
		-0.091831, 	-0.266966, 	-0.213413, 
		-0.082009, 	-0.143003, 	-0.030201, 

		-0.118459, 	-0.181813, 	0.079583, 
		0.002326, 	0.049531, 	-0.162176, 
		0.128860, 	-0.195318, 	-0.197345, 

		-0.113464, 	0.060990, 	0.057671, 
		-0.222511, 	-0.096810, 	0.101278, 
		-0.183309, 	0.095996, 	0.025733, 


		-0.157975, 	0.108065, 	0.088776, 
		-0.008120, 	0.012072, 	0.192157, 
		0.087760, 	0.056185, 	0.241607, 

		0.031634, 	0.097232, 	0.187729, 
		0.147226, 	-0.011526, 	0.113844, 
		-0.100456, 	0.226374, 	0.209470, 

		0.044447, 	-0.055970, 	-0.040752, 
		0.169753, 	0.177713, 	0.163792, 
		-0.101938, 	0.114569, 	0.121680, 


		0.030990, 	0.176451, 	0.039935, 
		-0.021730, 	0.272300, 	0.288999, 
		0.024976, 	0.224502, 	0.267277, 

		0.043382, 	0.170079, 	0.094133, 
		-0.000851, 	0.007582, 	-0.088809, 
		-0.115261, 	0.221387, 	-0.104277, 

		0.056117, 	0.076917, 	0.032288, 
		-0.101805, 	0.179039, 	-0.093970, 
		0.042769, 	-0.098022, 	0.126309, 


		-0.206228, 	-0.162345, 	-0.150860, 
		-0.176434, 	-0.196041, 	-0.143823, 
		-0.322515, 	-0.156788, 	-0.015156, 

		-0.013574, 	-0.150077, 	0.228739, 
		0.158994, 	-0.010942, 	-0.069302, 
		-0.139799, 	0.125611, 	0.128282, 

		0.010301, 	0.056385, 	0.007532, 
		-0.023126, 	-0.001031, 	-0.118655, 
		0.104199, 	0.069042, 	-0.019512
	};

    float bias[16] = {
		0.096862,
		0.157282,
		0.036964,
		0.064329,
		0.161593,
		0.065117,
		0.075384,
		0.104446,
		0.046793,
		0.151883,
		0.128381,
		0.112092,
		0.158164,
		0.123484,
		0.153514,
		0.096165
	};

	float prelu_weight[16] = {
		-0.051619,
		0.091308,
		0.055416,
		0.313566,
		0.093026,
		0.116615,
		0.009297,
		0.015504,
		0.195489,
		0.108506,
		0.193167,
		0.196041,
		0.270362,
		0.070133,
		0.340978,
		0.344374
	};
#pragma HLS ARRAY_PARTITION variable=bias type=complete
#pragma HLS ARRAY_PARTITION variable=prelu_weight type=complete
//#pragma HLS BIND_STORAGE variable=out_conv type=ram_s2p impl=uram
#pragma HLS BIND_STORAGE variable=weights type=ram_s2p impl=lutram
//#pragma HLS ARRAY_PARTITION variable=weights
	float inArr[INPUT_SIZE * INPUT_SIZE * CONV1_IN_CHANNEL] = {0};
    stream2arr(input, inArr, INPUT_SIZE * INPUT_SIZE * CONV1_IN_CHANNEL);
//    for(int i = 0; i < INPUT_SIZE * INPUT_SIZE * CONV1_IN_CHANNEL; i++){
//    	std::cout << inArr[i] << std::endl;
//    }
    int in_offset = 0;
    int weight_offset = 0;
    int data_offset = 0;
    float sum = 0;

	// Convolution layer
    ConvFilter1:
	for (int filter = 0; filter < CONV1_FILTER; filter++) {
		ConvY:
		for (int ify = 0; ify < CONV1_OUT_SIZE; ify++) {
			ConvX:
			for (int ifx = 0; ifx < CONV1_OUT_SIZE; ifx++){
#pragma HLS PIPELINE ii=10
				float sumArr[CONV1_SIZE] = {0};
				ConvChannel:
				for (int inChan = 0; inChan < CONV1_IN_CHANNEL; inChan++) {
					ConvKy:
					for (int ky = 0; ky < CONV1_SIZE; ky++) {
						ConvKx:
						for (int kx = 0; kx < CONV1_SIZE; kx++) {
							in_offset = inChan * INPUT_SIZE * INPUT_SIZE + INPUT_SIZE * (ify + ky) + (ifx + kx);
							weight_offset = CONV1_SIZE * CONV1_SIZE * inChan + CONV1_IN_CHANNEL * CONV1_SIZE * CONV1_SIZE * filter + CONV1_SIZE * ky + kx;
							sumArr[kx] += inArr[in_offset] * weights[weight_offset];
						}
					}
				}
				output.write(prelu(sumArr[0] + sumArr[1] + sumArr[2] + bias[filter], prelu_weight[filter]));
			}
		}
	}
	return;
}
void mp_1_accel(hls::stream<float>& input, hls::stream<float>& output){
	float out_conv[CONV1_OUT_SIZE * CONV1_OUT_SIZE * CONV1_FILTER] = {0};
#pragma HLS BIND_STORAGE variable=out_conv type=ram_s2p impl=uram
	stream2arr(input, out_conv, CONV1_OUT_SIZE * CONV1_OUT_SIZE * CONV1_FILTER);
	int in_offset=0;

	//Max pooling layer
	Pool_channel:
	for (int inChan = 0; inChan < CONV1_FILTER; inChan++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
	Pool_y1:
		for (int ify = 0; ify < POOL1_OUT_SIZE; ify++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			Pool_x:
			for (int ifx = 0; ifx < POOL1_OUT_SIZE; ifx++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			//float max = FLOAT_MIN;
//				int data_offset = inChan * POOL1_OUT_SIZE * POOL1_OUT_SIZE + ify * POOL1_OUT_SIZE + ifx;
				int out_conv_offset = inChan * CONV1_OUT_SIZE * CONV1_OUT_SIZE + ify * STRIDE1 * CONV1_OUT_SIZE + ifx * STRIDE1;
				float max = out_conv[out_conv_offset];
				Ky:
				for (int ky = 0; ky < MP1_SIZE; ky++) {
#pragma HLS PIPELINE off=false ii=8
#pragma HLS UNROLL off=true
					Kx:
					for (int kx = 0; kx < MP1_SIZE; kx++) {
#pragma HLS UNROLL off=false
#pragma HLS PIPELINE off=true
						in_offset = out_conv_offset + ky * CONV1_OUT_SIZE + kx;
						if( ((CONV1_OUT_SIZE - ifx * STRIDE1) >= MP1_SIZE) && ((CONV1_OUT_SIZE - ify * STRIDE1) >= MP1_SIZE)){
							max = (out_conv[in_offset] > max) ? out_conv[in_offset] : max;
						} else {
							if(kx >= (CONV1_OUT_SIZE - ifx * STRIDE1)){
								in_offset = in_offset - 1;
							}
							if(ky >= (CONV1_OUT_SIZE - ify * STRIDE1)){
								in_offset = in_offset - CONV1_OUT_SIZE;
							}
							max = (out_conv[in_offset] > max) ? out_conv[in_offset] : max;
						}
					}
				}
				output.write(max);
			}
		}
	}
	return;
}

void conv_2_accel(hls::stream<float>& input, hls::stream<float>& output){
//#pragma HLS INLINE off
	float prelu_weight[32] = {
		0.020511,
		0.005574,
		0.012154,
		0.007062,
		0.014251,
		0.287471,
		0.131268,
		0.190098,
		0.032330,
		0.019402,
		0.320511,
		0.009714,
		0.174275,
		0.005496,
		0.030228,
		0.148757,
		0.333408,
		0.018040,
		0.350980,
		0.016396,
		0.148891,
		0.240770,
		-0.004884,
		0.145898,
		0.006115,
		0.244128,
		-0.034029,
		0.026669,
		0.067898,
		0.038785,
		0.004239,
		0.010094
	};

	float dw_weight[144] = {
		-0.056712, 	0.029133, 	-0.194656, 
		0.031777, 	0.020312, 	-0.159503, 
		-0.184568, 	-0.176846, 	0.024590, 


		0.164240, 	0.152909, 	0.135178, 
		-0.059845, 	-0.132128, 	0.121193, 
		0.152012, 	0.065753, 	0.001444, 


		0.139886, 	0.254609, 	0.082641, 
		0.147878, 	0.144445, 	-0.153298, 
		0.140998, 	0.128139, 	-0.004177, 


		0.105190, 	-0.281384, 	-0.021322, 
		0.206935, 	-0.073329, 	-0.248042, 
		0.247164, 	-0.050885, 	-0.198962, 


		0.069090, 	0.117431, 	0.095880, 
		0.196965, 	-0.089582, 	0.161668, 
		0.199996, 	-0.169976, 	0.004710, 


		0.087361, 	-0.091935, 	0.165586, 
		-0.031930, 	0.228512, 	0.170397, 
		0.033415, 	0.225361, 	0.137532, 


		-0.144880, 	0.105208, 	0.068458, 
		-0.125838, 	-0.100151, 	0.091072, 
		0.003146, 	-0.069419, 	0.078142, 


		0.095083, 	0.109904, 	0.203363, 
		-0.131165, 	-0.061074, 	0.115000, 
		0.042136, 	-0.133595, 	0.151860, 


		0.041581, 	-0.236113, 	-0.310007, 
		-0.178530, 	-0.270621, 	-0.289669, 
		-0.294149, 	-0.227692, 	0.013486, 


		-0.065236, 	0.113251, 	-0.139382, 
		-0.136674, 	-0.187885, 	-0.105930, 
		0.065536, 	0.016699, 	-0.213618, 


		0.241745, 	0.101586, 	-0.010180, 
		0.143580, 	-0.147870, 	-0.099866, 
		-0.172991, 	-0.236771, 	-0.072133, 


		-0.012092, 	-0.033521, 	0.243157, 
		0.204308, 	0.200309, 	0.234937, 
		0.006662, 	-0.122330, 	-0.124186, 


		0.291812, 	0.083021, 	0.202125, 
		0.221870, 	0.125558, 	0.101843, 
		0.111942, 	-0.083491, 	-0.098744, 


		-0.184841, 	0.086461, 	-0.105535, 
		-0.011354, 	0.123187, 	0.113133, 
		-0.197957, 	-0.067922, 	0.123998, 


		0.273702, 	0.063935, 	0.203640, 
		0.226533, 	0.030285, 	0.096073, 
		0.003545, 	-0.006103, 	0.236347, 


		-0.236142, 	0.054430, 	-0.171622, 
		-0.283419, 	-0.281053, 	-0.233530, 
		-0.010234, 	-0.132589, 	-0.060933
	};

	float pw_weight[512] = {
			0.183533, 
			-0.012045, 
			0.135095, 
			-0.185467, 
			0.188900, 
			0.086725, 
			-0.060874, 
			-0.126222, 
			0.263277, 
			-0.005977, 
			0.124001, 
			0.170491, 
			-0.096905, 
			-0.003048, 
			0.239446, 
			-0.094273, 
			-0.096507, 
			0.162811, 
			0.024911, 
			0.022920, 
			-0.144544, 
			0.270667, 
			-0.068285, 
			-0.014098, 
			-0.297086, 
			-0.170321, 
			0.018458, 
			0.268123, 
			0.274660, 
			0.034091, 
			-0.032137, 
			0.041960, 
			-0.091167, 
			0.073115, 
			0.080279, 
			-0.041963, 
			0.113189, 
			-0.155504, 
			-0.099972, 
			0.032274, 
			-0.024132, 
			-0.179674, 
			0.050275, 
			0.217489, 
			0.014367, 
			-0.168811, 
			-0.057790, 
			-0.135918, 
			0.159816, 
			-0.049371, 
			0.220238, 
			-0.256569, 
			-0.258571, 
			0.230138, 
			-0.035074, 
			-0.123767, 
			-0.094252, 
			-0.058787, 
			0.040649, 
			-0.145639, 
			0.169446, 
			0.059228, 
			0.209433, 
			-0.280397, 
			-0.213112, 
			-0.074805, 
			0.044374, 
			-0.276315, 
			0.004677, 
			0.119622, 
			0.079727, 
			0.117668, 
			0.127213, 
			-0.110599, 
			-0.083961, 
			-0.118758, 
			-0.225112, 
			0.057834, 
			0.290401, 
			0.029154, 
			-0.257814, 
			-0.180932, 
			0.015144, 
			-0.039850, 
			0.113791, 
			0.127980, 
			0.117638, 
			-0.106257, 
			0.303664, 
			0.158934, 
			-0.132133, 
			-0.183838, 
			-0.173122, 
			-0.221649, 
			0.369321, 
			0.348295, 
			0.092835, 
			0.250859, 
			-0.138514, 
			-0.399667, 
			-0.010745, 
			-0.032437, 
			0.001657, 
			0.178014, 
			0.038251, 
			-0.218643, 
			-0.004447, 
			-0.155137, 
			0.126086, 
			0.228092, 
			0.348436, 
			0.283284, 
			-0.308925, 
			0.242920, 
			0.133322, 
			0.395826, 
			0.075073, 
			-0.210740, 
			-0.150247, 
			-0.183039, 
			-0.224802, 
			-0.022613, 
			-0.007099, 
			0.230520, 
			0.304842, 
			-0.255591, 
			-0.174448, 
			-0.361920, 
			-0.127312, 
			0.001028, 
			0.233050, 
			0.086499, 
			-0.141523, 
			-0.032263, 
			-0.216534, 
			-0.082388, 
			-0.210511, 
			0.195325, 
			-0.017593, 
			0.041208, 
			0.015900, 
			0.125885, 
			0.028314, 
			0.121762, 
			0.055678, 
			-0.120823, 
			0.030748, 
			0.058169, 
			0.046580, 
			0.019676, 
			-0.042680, 
			-0.102309, 
			0.177411, 
			-0.070382, 
			-0.023769, 
			0.003767, 
			0.043347, 
			0.072624, 
			0.287788, 
			0.183941, 
			0.211298, 
			-0.285308, 
			-0.059315, 
			-0.092823, 
			0.016729, 
			0.263789, 
			0.058357, 
			0.125876, 
			-0.387988, 
			0.061402, 
			0.009331, 
			-0.069414, 
			-0.136434, 
			-0.093043, 
			-0.096501, 
			0.332574, 
			0.034146, 
			0.005331, 
			-0.072778, 
			-0.107477, 
			-0.000108, 
			-0.030416, 
			-0.007691, 
			-0.005781, 
			0.002091, 
			-0.023345, 
			-0.041224, 
			-0.028409, 
			0.022983, 
			-0.003077, 
			-0.026426, 
			-0.028370, 
			-0.296637, 
			0.204125, 
			-0.107010, 
			0.052037, 
			-0.171062, 
			-0.214573, 
			-0.074329, 
			-0.036424, 
			-0.142243, 
			-0.069926, 
			0.121900, 
			0.157012, 
			-0.223164, 
			0.148791, 
			-0.264973, 
			0.096600, 
			-0.026161, 
			-0.041619, 
			0.019681, 
			0.027559, 
			0.033074, 
			0.057073, 
			-0.029701, 
			0.041759, 
			-0.110109, 
			0.010195, 
			-0.003579, 
			-0.034723, 
			0.060943, 
			-0.006900, 
			0.005506, 
			-0.041606, 
			0.082084, 
			0.145428, 
			-0.274776, 
			0.280616, 
			-0.018899, 
			-0.185692, 
			-0.174501, 
			0.273343, 
			-0.136472, 
			-0.181662, 
			0.289901, 
			-0.088054, 
			0.123527, 
			-0.299870, 
			0.091618, 
			-0.070078, 
			0.012425, 
			-0.001696, 
			0.011159, 
			0.011134, 
			0.035010, 
			-0.055106, 
			-0.004316, 
			0.034521, 
			-0.101474, 
			0.035190, 
			0.017985, 
			-0.036316, 
			-0.034213, 
			-0.034214, 
			-0.127596, 
			0.045825, 
			0.331148, 
			0.051979, 
			-0.004046, 
			-0.176796, 
			0.215807, 
			-0.028712, 
			0.147596, 
			-0.262896, 
			-0.279414, 
			0.306923, 
			-0.190553, 
			-0.320735, 
			0.166890, 
			0.025287, 
			0.016087, 
			-0.321323, 
			-0.337955, 
			-0.149524, 
			-0.223640, 
			-0.291566, 
			-0.104737, 
			-0.216427, 
			0.129383, 
			0.153496, 
			0.245451, 
			-0.126306, 
			-0.318687, 
			0.252324, 
			0.289112, 
			-0.157875, 
			-0.075092, 
			0.011677, 
			-0.195141, 
			-0.256947, 
			0.205174, 
			-0.055069, 
			-0.291616, 
			-0.095770, 
			-0.078598, 
			0.112385, 
			-0.377373, 
			0.065730, 
			-0.085398, 
			0.284195, 
			-0.129121, 
			-0.146624, 
			-0.202888, 
			-0.109933, 
			0.314823, 
			0.232259, 
			0.186226, 
			0.415914, 
			0.223983, 
			-0.179437, 
			-0.285280, 
			0.103891, 
			-0.161842, 
			-0.266890, 
			-0.301197, 
			0.159089, 
			0.198957, 
			-0.247147, 
			-0.311905, 
			-0.205834, 
			0.008074, 
			-0.005667, 
			0.023209, 
			0.086764, 
			-0.042019, 
			-0.012618, 
			0.008478, 
			0.003176, 
			0.040888, 
			-0.002783, 
			0.018683, 
			-0.000257, 
			-0.070634, 
			-0.004136, 
			-0.080838, 
			0.010177, 
			0.165378, 
			0.145730, 
			-0.002051, 
			0.409423, 
			0.118789, 
			-0.232728, 
			-0.151944, 
			-0.012170, 
			-0.230957, 
			0.085845, 
			0.240789, 
			-0.076862, 
			0.210853, 
			-0.217947, 
			0.230795, 
			-0.041664, 
			0.072235, 
			0.161400, 
			0.168406, 
			0.177538, 
			0.216796, 
			0.143170, 
			0.028215, 
			-0.061840, 
			-0.376876, 
			0.103312, 
			-0.050723, 
			-0.270929, 
			-0.012413, 
			-0.152646, 
			0.063912, 
			-0.288650, 
			0.197674, 
			0.008444, 
			0.045185, 
			0.067813, 
			0.332336, 
			-0.222943, 
			-0.198550, 
			-0.071680, 
			0.241034, 
			0.001576, 
			0.015135, 
			-0.245797, 
			0.273587, 
			0.021263, 
			-0.022056, 
			-0.067759, 
			-0.033491, 
			0.009378, 
			-0.030701, 
			-0.022686, 
			0.037250, 
			-0.074230, 
			0.013590, 
			-0.022997, 
			0.003956, 
			-0.010086, 
			0.088302, 
			-0.018867, 
			-0.009947, 
			-0.005227, 
			0.045152, 
			0.003838, 
			0.027427, 
			0.022422, 
			0.285121, 
			0.287880, 
			-0.191442, 
			0.094755, 
			-0.289533, 
			0.027500, 
			-0.585416, 
			0.208500, 
			-0.077272, 
			-0.005381, 
			0.364772, 
			-0.323024, 
			0.064074, 
			-0.385534, 
			-0.051917, 
			0.232907, 
			0.243453, 
			-0.361195, 
			-0.016240, 
			-0.238228, 
			-0.126701, 
			0.066404, 
			-0.143249, 
			0.041360, 
			0.167691, 
			-0.239715, 
			-0.115712, 
			0.074222, 
			-0.133460, 
			-0.127379, 
			-0.135447, 
			0.081170, 
			0.167017, 
			-0.345292, 
			-0.228273, 
			0.128504, 
			0.034597, 
			0.061638, 
			-0.340140, 
			-0.171707, 
			0.025312, 
			-0.025284, 
			0.168481, 
			0.211407, 
			0.067552, 
			0.283150, 
			-0.060070, 
			-0.025417, 
			-0.050379, 
			-0.164952, 
			0.097937, 
			0.110689, 
			0.035703, 
			-0.077538, 
			0.165748, 
			-0.099560, 
			-0.078867, 
			0.082359, 
			-0.060857, 
			0.001524, 
			0.046947, 
			0.229880, 
			-0.098594, 
			0.130685, 
			0.094048, 
			-0.302740, 
			0.349351, 
			0.247755, 
			0.186627, 
			0.216249, 
			-0.287097, 
			0.187111, 
			-0.426526, 
			0.421632, 
			0.500767, 
			0.024024, 
			-0.299104, 
			0.094569, 
			-0.128750, 
			0.008297, 
			-0.095007, 
			0.307487, 
			-0.066986, 
			-0.011234, 
			0.010090, 
			-0.084453, 
			-0.114280, 
			-0.082168, 
			0.112536, 
			0.070527, 
			0.026763, 
			-0.125521, 
			0.239475, 
			0.167217, 
			0.170842, 
			-0.004251, 
			0.181170, 
			-0.268411, 
			0.160893, 
			0.242554, 
			0.125136, 
			0.235616, 
			0.009453, 
			0.034837, 
			0.160222, 
			0.079649, 
			-0.011726, 
			-0.160421, 
			0.347162, 
			0.014973
	};

#pragma HLS ARRAY_PARTITION variable=prelu_weight type=complete
	float depthOut[CONV2_OUT_SIZE * CONV2_OUT_SIZE * CONV2_IN_CHANNEL] = {0};
	float inArr[POOL1_OUT_SIZE * POOL1_OUT_SIZE * CONV1_FILTER] = {0};
	stream2arr(input, inArr, POOL1_OUT_SIZE * POOL1_OUT_SIZE * CONV1_FILTER);

	//Depthwise convolution
	ConvFilter:
	for (int filter = 0; filter < CONV2_IN_CHANNEL; filter++) {
		ConvY:
		for (int ify = 0; ify < CONV2_OUT_SIZE; ify++) {
//#pragma HLS PIPELINE ii=120
			ConvX:
			for (int ifx = 0; ifx < CONV2_OUT_SIZE; ifx++){
				int data_offset = CONV2_OUT_SIZE * CONV2_OUT_SIZE * filter + ify * CONV2_OUT_SIZE  + ifx;
				float sumArr[CONV2_SIZE] = {0};
				ConvKy:
				for (int ky = 0; ky < CONV2_SIZE; ky++) {
					ConvKx:
					for (int kx = 0; kx < CONV2_SIZE; kx++) {
#pragma HLS UNROLL
						sumArr[kx] += inArr[filter * POOL1_OUT_SIZE * POOL1_OUT_SIZE + POOL1_OUT_SIZE * (ify + ky) + (ifx + kx)] *
							dw_weight[CONV2_SIZE * CONV2_SIZE * filter + CONV2_SIZE * ky + kx];
					}
				}
				depthOut[data_offset] = sumArr[0] + sumArr[1] + sumArr[2];
			}
		}
	}

	//Pointwise convolution
	ConvFilterPW:
	for(int filter = 0 ; filter < CONV2_FILTER; filter++){
		float prelu_weight_val = prelu_weight[filter];
		ConvYPW:
		for(int ify = 0 ; ify < CONV2_OUT_SIZE; ify++){
			ConvXPW:
			for(int ifx = 0; ifx < CONV2_OUT_SIZE; ifx++){
#pragma HLS PIPELINE ii=20
				float sum = 0;
				int data_offset = CONV2_OUT_SIZE * CONV2_OUT_SIZE * filter + ify * CONV2_OUT_SIZE + ifx;
				ConvChanPW:
				for(int inChan = 0; inChan < CONV2_IN_CHANNEL; inChan++){
					sum += depthOut[inChan * CONV2_OUT_SIZE * CONV2_OUT_SIZE + CONV2_OUT_SIZE * ify + ifx] *
				pw_weight[CONV2_IN_CHANNEL * filter + inChan];
				}
				output.write(prelu(sum, prelu_weight_val));
			}
		}
	}
	return;
}
void mp_2_accel(hls::stream<float>& input, hls::stream<float>& output){

	float out_conv2[CONV2_OUT_SIZE * CONV2_OUT_SIZE * CONV2_FILTER] = {0};
	stream2arr(input, out_conv2, CONV2_OUT_SIZE * CONV2_OUT_SIZE * CONV2_FILTER);
#pragma HLS BIND_STORAGE variable=out_conv2 type=ram_s2p impl=uram
	int in_offset = 0;

	//Max pooling layer
	Pool_channel:
	for (int inChan = 0; inChan < CONV2_FILTER; inChan++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
		Pool_y2:
		for (int ify = 0; ify < POOL2_OUT_SIZE; ify++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			Pool_x:
			for (int ifx = 0; ifx < POOL2_OUT_SIZE; ifx++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			//float max = FLOAT_MIN;
				int data_offset = inChan * POOL2_OUT_SIZE * POOL2_OUT_SIZE + ify * POOL2_OUT_SIZE + ifx;
				int out_conv_offset = inChan * CONV2_OUT_SIZE * CONV2_OUT_SIZE + ify * STRIDE2 * CONV2_OUT_SIZE + ifx * STRIDE2;
				float max = out_conv2[out_conv_offset];
				Ky:
				for (int ky = 0; ky < MP2_SIZE; ky++) {
#pragma HLS PIPELINE off=false ii=6
#pragma HLS UNROLL off=true
					Kx:
					for (int kx = 0; kx < MP2_SIZE; kx++) {
#pragma HLS UNROLL off=false
#pragma HLS PIPELINE off=true
						in_offset = out_conv_offset + ky * CONV2_OUT_SIZE + kx;
//						int val = out_conv2[in_offset];
						if( ((CONV2_OUT_SIZE - ifx * STRIDE2) >= MP2_SIZE) && ((CONV2_OUT_SIZE - ify * STRIDE2) >= MP2_SIZE)){
							max = (out_conv2[in_offset] > max) ? out_conv2[in_offset] : max;
						} else {
							if(kx >= (CONV2_OUT_SIZE - ifx * STRIDE2)){
								in_offset = in_offset - 1;
							}
							if(ky >= (CONV2_OUT_SIZE - ify * STRIDE2)){
								in_offset = in_offset - CONV2_OUT_SIZE;
							}
							max = (out_conv2[in_offset] > max) ? out_conv2[in_offset] : max;
						}
					}
				}
				output.write(max);
			}
		}
	}
	return;
}

void conv_3_accel(hls::stream<float>& input, hls::stream<float>& output){

	float prelu_weight[64] = {
		-0.002036,
		0.047567,
		0.105071,
		0.124143,
		0.039428,
		0.048642,
		0.104199,
		0.076744,
		0.052126,
		0.066042,
		0.140808,
		0.151210,
		0.027583,
		0.059848,
		0.162013,
		0.144016,
		0.140342,
		0.054163,
		0.117840,
		0.044666,
		0.024114,
		0.044471,
		0.060557,
		0.047368,
		0.156953,
		0.066904,
		0.060608,
		0.070168,
		0.064568,
		0.136021,
		0.125245,
		0.030036,
		0.081662,
		-0.007397,
		0.140628,
		0.148104,
		0.151377,
		0.106402,
		0.159600,
		0.106738,
		0.102454,
		0.009364,
		0.168986,
		0.158707,
		0.159546,
		0.143095,
		0.110161,
		-0.009503,
		0.225515,
		0.079173,
		0.111159,
		0.125465,
		0.074789,
		0.015386,
		0.131222,
		0.040469,
		0.078307,
		0.089851,
		0.207632,
		0.002454,
		0.154489,
		0.103135,
		0.133817,
		0.190716
	};
	float dw_weight[128] = {
		-0.142277, 	-0.133186, 
		-0.189249, 	0.133725, 
		-0.102654, 	0.098643, 
		0.094763, 	-0.202199, 
		0.176107, 	0.021511, 
		-0.157916, 	0.066560, 
		0.146982, 	0.018335, 
		-0.186634, 	0.212040, 
		0.074230, 	-0.243532, 
		0.009681, 	0.091553, 
		0.153218, 	0.243376, 
		-0.068990, 	0.126497, 
		0.105739, 	0.145047, 
		-0.252120, 	0.229854, 
		0.077501, 	-0.024124, 
		-0.279706, 	0.072716, 
		-0.038895, 	-0.275160, 
		-0.165525, 	-0.226334, 
		-0.044496, 	-0.163375, 
		0.093781, 	-0.205582, 
		0.283217, 	0.231074, 
		0.190466, 	0.154334, 
		-0.089114, 	-0.070885, 
		-0.035330, 	-0.016952, 
		0.101811, 	0.022378, 
		0.092441, 	0.076789, 
		-0.048028, 	0.073436, 
		-0.052497, 	-0.024641, 
		-0.228515, 	-0.155405, 
		-0.162528, 	-0.168069, 
		-0.025450, 	0.139844, 
		0.033673, 	0.008100, 
		0.267722, 	0.200334, 
		0.067494, 	0.217899, 
		0.214462, 	0.170045, 
		-0.040250, 	0.116236, 
		0.214777, 	0.184740, 
		0.356249, 	0.197516, 
		-0.192964, 	-0.098719, 
		-0.257685, 	0.048630, 
		0.019794, 	-0.042712, 
		-0.060381, 	-0.126181, 
		0.154749, 	-0.109258, 
		-0.128035, 	-0.284552, 
		-0.067735, 	-0.290766, 
		0.275725, 	0.085682, 
		0.217197, 	0.104898, 
		-0.032150, 	0.273812, 
		-0.007363, 	0.035449, 
		-0.087484, 	-0.082318, 
		0.130279, 	-0.312192, 
		0.176313, 	-0.118906, 
		-0.111872, 	-0.272885, 
		0.257513, 	-0.131611, 
		-0.185227, 	0.207382, 
		-0.224080, 	0.173109, 
		-0.042507, 	-0.240995, 
		0.072025, 	-0.098936, 
		-0.260399, 	-0.160462, 
		0.161850, 	0.317088, 
		0.165983, 	-0.221526, 
		0.106504, 	0.066339, 
		0.185770, 	-0.162740, 
		0.180649, 	-0.025756
	};
	float pw_weight[2048] = {
		0.092960, 
		-0.106137, 
		0.032187, 
		0.017416, 
		-0.129227, 
		-0.056371, 
		0.048187, 
		0.173666, 
		-0.096598, 
		-0.035050, 
		0.042634, 
		0.030303, 
		0.032204, 
		0.006957, 
		0.150778, 
		-0.005067, 
		0.068381, 
		-0.145653, 
		0.243150, 
		-0.037563, 
		-0.013349, 
		0.074272, 
		-0.045117, 
		-0.077944, 
		0.029721, 
		-0.255950, 
		-0.133606, 
		0.084180, 
		-0.007168, 
		-0.066026, 
		-0.000357, 
		-0.109365, 
		0.050231, 
		0.197947, 
		-0.017890, 
		-0.077289, 
		0.044086, 
		-0.120777, 
		-0.220367, 
		-0.050818, 
		0.060480, 
		0.072360, 
		-0.183947, 
		0.000819, 
		0.061355, 
		0.025464, 
		0.110683, 
		0.004027, 
		0.117035, 
		0.081925, 
		-0.006512, 
		-0.046249, 
		-0.030365, 
		-0.087299, 
		0.008766, 
		0.127571, 
		0.007903, 
		-0.087667, 
		-0.110680, 
		0.173096, 
		0.045445, 
		-0.196408, 
		-0.063838, 
		0.022789, 
		-0.058213, 
		0.021350, 
		0.040299, 
		0.023256, 
		-0.016019, 
		-0.102088, 
		0.122368, 
		-0.053352, 
		-0.064401, 
		0.024250, 
		0.018748, 
		-0.010128, 
		-0.004068, 
		0.013794, 
		0.145125, 
		-0.001741, 
		-0.057596, 
		0.026794, 
		-0.027869, 
		0.133242, 
		0.013932, 
		-0.113675, 
		-0.080421, 
		-0.043736, 
		-0.008291, 
		-0.216638, 
		0.012054, 
		0.124411, 
		0.000573, 
		0.213909, 
		0.038395, 
		-0.106785, 
		0.220590, 
		0.137132, 
		-0.142521, 
		-0.158421, 
		-0.057718, 
		-0.145583, 
		0.153291, 
		-0.173475, 
		0.100415, 
		-0.003332, 
		-0.226691, 
		-0.031539, 
		-0.002372, 
		0.020807, 
		-0.110212, 
		0.019494, 
		0.189294, 
		-0.147573, 
		-0.090708, 
		-0.043908, 
		0.010999, 
		-0.050876, 
		-0.090962, 
		0.096188, 
		-0.019542, 
		0.054379, 
		-0.155659, 
		0.192397, 
		-0.036466, 
		0.200217, 
		-0.001695, 
		-0.053460, 
		-0.123493, 
		-0.099079, 
		0.093570, 
		-0.128299, 
		0.135603, 
		-0.048600, 
		0.134414, 
		-0.095886, 
		-0.003046, 
		-0.064909, 
		-0.112670, 
		0.000180, 
		-0.093578, 
		0.020132, 
		-0.163039, 
		0.002202, 
		0.107530, 
		0.003242, 
		-0.169090, 
		0.151095, 
		0.009204, 
		-0.020558, 
		-0.194513, 
		0.059972, 
		0.008169, 
		-0.162624, 
		-0.200894, 
		0.070187, 
		0.079055, 
		-0.173985, 
		-0.056674, 
		0.126442, 
		0.052444, 
		-0.121552, 
		0.123337, 
		0.179755, 
		0.053356, 
		-0.211089, 
		0.079107, 
		-0.205822, 
		0.053008, 
		0.063194, 
		-0.145291, 
		-0.003062, 
		0.085304, 
		-0.024785, 
		-0.023608, 
		0.022760, 
		0.188177, 
		0.067594, 
		-0.175439, 
		-0.228243, 
		0.027994, 
		0.198119, 
		0.009958, 
		0.027026, 
		-0.010671, 
		-0.203633, 
		-0.174705, 
		0.058570, 
		-0.063491, 
		-0.188035, 
		0.106969, 
		0.043864, 
		-0.121448, 
		-0.010892, 
		-0.044051, 
		0.004667, 
		-0.118898, 
		0.092935, 
		0.083314, 
		0.131748, 
		0.050271, 
		-0.021508, 
		-0.005435, 
		0.003143, 
		-0.076381, 
		-0.000137, 
		-0.042619, 
		-0.013627, 
		-0.173527, 
		-0.101547, 
		-0.183348, 
		0.004374, 
		0.022994, 
		0.068898, 
		-0.051650, 
		-0.067917, 
		0.005005, 
		0.059026, 
		0.015716, 
		-0.068637, 
		-0.057872, 
		-0.061471, 
		0.025814, 
		0.062776, 
		0.070002, 
		0.000902, 
		-0.035902, 
		0.007363, 
		-0.006520, 
		-0.084530, 
		0.133170, 
		-0.106247, 
		0.017378, 
		0.029363, 
		0.000398, 
		-0.026609, 
		0.021471, 
		0.001576, 
		-0.049855, 
		0.007159, 
		-0.029756, 
		0.003911, 
		-0.014083, 
		0.167573, 
		0.000258, 
		-0.114010, 
		-0.002754, 
		0.009217, 
		-0.019205, 
		-0.127981, 
		0.065466, 
		-0.076055, 
		-0.009306, 
		0.180172, 
		-0.059522, 
		-0.032087, 
		0.040765, 
		0.019611, 
		-0.051521, 
		0.027084, 
		-0.135669, 
		0.028125, 
		0.208725, 
		-0.176499, 
		0.039574, 
		-0.077489, 
		0.079710, 
		-0.028027, 
		0.041231, 
		-0.021615, 
		-0.179963, 
		-0.000791, 
		0.070221, 
		-0.045723, 
		-0.081793, 
		-0.042862, 
		-0.033639, 
		0.130551, 
		0.151848, 
		0.060235, 
		-0.013165, 
		-0.030508, 
		-0.149672, 
		0.130897, 
		-0.088161, 
		0.162311, 
		-0.105252, 
		-0.177335, 
		0.113409, 
		0.177492, 
		0.072263, 
		-0.177510, 
		-0.039499, 
		-0.137497, 
		-0.131889, 
		0.167506, 
		0.052353, 
		0.048085, 
		0.048711, 
		-0.025548, 
		-0.027478, 
		0.039469, 
		-0.084050, 
		0.018737, 
		0.245659, 
		-0.056553, 
		0.103804, 
		-0.107439, 
		-0.026267, 
		0.165298, 
		0.036194, 
		0.165772, 
		-0.005837, 
		-0.132620, 
		-0.148012, 
		0.068503, 
		0.000564, 
		0.009668, 
		0.090055, 
		-0.245026, 
		-0.085821, 
		-0.128964, 
		0.150159, 
		-0.077584, 
		-0.050701, 
		0.207361, 
		0.097739, 
		-0.050388, 
		0.021124, 
		0.079990, 
		-0.097755, 
		-0.004669, 
		-0.048996, 
		-0.009252, 
		0.040012, 
		0.018651, 
		-0.130064, 
		0.186119, 
		0.023683, 
		0.122393, 
		0.010907, 
		0.085492, 
		0.121257, 
		-0.005550, 
		0.007258, 
		-0.161102, 
		0.107029, 
		-0.089491, 
		-0.097714, 
		-0.134805, 
		-0.051856, 
		-0.039930, 
		0.094953, 
		-0.032323, 
		-0.070511, 
		0.113020, 
		0.054687, 
		-0.058735, 
		0.042177, 
		0.011556, 
		-0.070588, 
		0.074380, 
		0.046448, 
		0.013777, 
		0.006138, 
		-0.024443, 
		0.161023, 
		0.002732, 
		-0.014874, 
		0.019202, 
		0.052935, 
		0.196817, 
		-0.002862, 
		-0.084254, 
		-0.019446, 
		-0.023951, 
		0.017862, 
		-0.198628, 
		0.009646, 
		-0.071905, 
		0.031192, 
		-0.128640, 
		0.060812, 
		0.134194, 
		-0.188272, 
		0.158263, 
		-0.181268, 
		0.049429, 
		-0.079620, 
		0.189655, 
		0.228649, 
		0.060839, 
		0.136366, 
		0.106024, 
		0.013281, 
		0.000656, 
		-0.102182, 
		-0.003341, 
		0.166879, 
		-0.032607, 
		0.103042, 
		0.072140, 
		-0.010671, 
		-0.109931, 
		0.046978, 
		0.004848, 
		0.013252, 
		0.166894, 
		0.008732, 
		0.082533, 
		-0.047527, 
		0.109186, 
		-0.009041, 
		-0.035985, 
		-0.229047, 
		0.122305, 
		-0.143448, 
		0.051710, 
		0.112631, 
		0.105905, 
		-0.030926, 
		-0.181860, 
		0.127204, 
		0.228029, 
		-0.052111, 
		0.073173, 
		0.047331, 
		-0.007354, 
		0.021814, 
		0.005379, 
		0.129210, 
		0.032189, 
		0.217507, 
		-0.024112, 
		0.063291, 
		0.037021, 
		0.025017, 
		-0.044922, 
		-0.145219, 
		-0.072600, 
		0.021726, 
		-0.101249, 
		-0.162318, 
		0.047058, 
		0.107015, 
		-0.202050, 
		-0.076657, 
		-0.189697, 
		-0.058050, 
		-0.032787, 
		-0.041872, 
		-0.018087, 
		-0.017776, 
		-0.060961, 
		-0.046027, 
		-0.064800, 
		-0.054228, 
		-0.002733, 
		0.051576, 
		0.010582, 
		-0.009535, 
		-0.007225, 
		0.115192, 
		0.001195, 
		0.022164, 
		-0.012620, 
		0.065039, 
		0.055388, 
		0.001414, 
		0.029999, 
		0.022862, 
		-0.023069, 
		0.003875, 
		-0.019395, 
		0.023548, 
		-0.024119, 
		-0.008986, 
		-0.021940, 
		0.006625, 
		-0.005321, 
		-0.040683, 
		-0.006510, 
		-0.015481, 
		-0.101130, 
		-0.089371, 
		-0.145035, 
		0.046423, 
		-0.177464, 
		0.093844, 
		-0.085710, 
		-0.252395, 
		-0.026564, 
		0.016663, 
		0.042317, 
		0.184502, 
		-0.023719, 
		0.006303, 
		0.157538, 
		-0.167283, 
		-0.237022, 
		0.000179, 
		-0.026884, 
		-0.099184, 
		0.201125, 
		-0.007527, 
		-0.023377, 
		-0.042842, 
		-0.135071, 
		-0.048103, 
		-0.255798, 
		0.010422, 
		-0.079915, 
		-0.122896, 
		-0.044129, 
		0.010406, 
		0.137642, 
		0.096304, 
		0.004835, 
		-0.211087, 
		0.116625, 
		-0.160227, 
		0.015763, 
		0.045553, 
		0.047961, 
		0.007862, 
		0.014836, 
		0.052712, 
		0.015014, 
		-0.026744, 
		-0.153685, 
		0.146964, 
		-0.004596, 
		-0.023426, 
		-0.136201, 
		-0.215026, 
		-0.032344, 
		0.032319, 
		-0.238073, 
		-0.067888, 
		0.024394, 
		0.128681, 
		-0.147739, 
		-0.017444, 
		0.212472, 
		0.005910, 
		0.015490, 
		0.018712, 
		0.029398, 
		-0.018823, 
		-0.071058, 
		-0.045007, 
		0.011382, 
		-0.048228, 
		-0.006746, 
		0.128787, 
		0.010486, 
		0.011318, 
		0.001639, 
		0.030216, 
		0.004358, 
		0.009868, 
		-0.013338, 
		0.103707, 
		0.135478, 
		-0.001630, 
		0.068465, 
		0.064306, 
		-0.033249, 
		0.002674, 
		-0.022034, 
		-0.062691, 
		0.018900, 
		0.043912, 
		-0.028877, 
		0.050474, 
		-0.040706, 
		-0.073300, 
		0.099019, 
		0.033866, 
		0.010530, 
		-0.065515, 
		0.253420, 
		0.028466, 
		0.125868, 
		0.020174, 
		-0.000528, 
		0.031011, 
		-0.006526, 
		-0.006100, 
		0.029108, 
		-0.182403, 
		-0.036772, 
		-0.198141, 
		0.207539, 
		-0.288676, 
		-0.207809, 
		0.027042, 
		0.193647, 
		-0.075320, 
		0.088161, 
		-0.011322, 
		-0.015530, 
		0.064917, 
		0.148635, 
		-0.082469, 
		-0.201556, 
		0.127825, 
		-0.203207, 
		-0.027451, 
		0.111131, 
		0.050757, 
		0.024187, 
		-0.069018, 
		-0.153126, 
		0.083369, 
		0.255252, 
		0.164749, 
		-0.000684, 
		-0.064771, 
		-0.039065, 
		0.011436, 
		0.023465, 
		-0.130647, 
		0.017190, 
		0.235829, 
		0.104884, 
		0.033591, 
		-0.176259, 
		0.001518, 
		0.012652, 
		-0.108616, 
		-0.047075, 
		-0.023041, 
		0.081206, 
		-0.051417, 
		0.056556, 
		0.002150, 
		-0.252945, 
		-0.043369, 
		-0.156818, 
		-0.113278, 
		-0.158277, 
		0.180776, 
		0.117859, 
		0.087386, 
		0.009273, 
		-0.102621, 
		-0.080239, 
		0.068902, 
		0.016256, 
		-0.182360, 
		-0.022095, 
		0.068361, 
		-0.008303, 
		-0.115662, 
		-0.001325, 
		0.205491, 
		-0.026381, 
		0.062268, 
		-0.024777, 
		0.019285, 
		0.090715, 
		0.168130, 
		0.096497, 
		-0.021513, 
		-0.010018, 
		-0.086212, 
		-0.029737, 
		-0.096903, 
		0.164505, 
		0.149304, 
		-0.158551, 
		-0.156111, 
		-0.152446, 
		0.077944, 
		-0.197793, 
		-0.104548, 
		0.044908, 
		-0.037294, 
		0.270440, 
		0.065550, 
		0.014303, 
		0.014453, 
		-0.009552, 
		0.067127, 
		0.007586, 
		-0.116732, 
		-0.000439, 
		-0.101036, 
		-0.031611, 
		-0.071836, 
		0.006635, 
		-0.008161, 
		-0.056253, 
		-0.032100, 
		-0.123815, 
		0.006376, 
		-0.005675, 
		0.061754, 
		-0.156207, 
		-0.065541, 
		-0.080058, 
		-0.092831, 
		0.185855, 
		0.020191, 
		0.111461, 
		-0.057571, 
		-0.104482, 
		-0.121226, 
		0.252454, 
		0.234516, 
		0.004363, 
		0.146417, 
		0.014739, 
		-0.102568, 
		-0.021956, 
		0.055333, 
		0.036861, 
		0.000752, 
		-0.020365, 
		-0.148974, 
		0.152837, 
		-0.269657, 
		-0.121315, 
		0.031576, 
		0.025436, 
		-0.062646, 
		0.205965, 
		-0.044656, 
		-0.159235, 
		-0.051596, 
		-0.028407, 
		-0.042624, 
		0.249354, 
		-0.088783, 
		0.022098, 
		0.062817, 
		-0.130737, 
		-0.070357, 
		-0.163518, 
		-0.005497, 
		0.001443, 
		-0.110933, 
		-0.261973, 
		-0.025769, 
		-0.011838, 
		0.138641, 
		0.045507, 
		-0.024753, 
		-0.014831, 
		-0.000135, 
		0.000748, 
		-0.135238, 
		0.145946, 
		0.021075, 
		-0.068525, 
		-0.021405, 
		-0.092917, 
		0.089290, 
		-0.073626, 
		-0.010394, 
		0.274983, 
		0.284140, 
		-0.170738, 
		-0.063723, 
		-0.085031, 
		-0.050504, 
		0.048915, 
		-0.064813, 
		-0.037403, 
		0.150857, 
		-0.004535, 
		0.062886, 
		-0.135634, 
		-0.152360, 
		0.117780, 
		-0.090561, 
		0.013520, 
		0.144947, 
		0.022904, 
		0.070926, 
		0.011099, 
		-0.159696, 
		-0.005917, 
		-0.061957, 
		-0.181007, 
		0.140597, 
		-0.044930, 
		0.033229, 
		0.185540, 
		-0.162553, 
		-0.069487, 
		0.011918, 
		-0.209085, 
		-0.041349, 
		-0.142453, 
		0.043783, 
		0.079337, 
		0.136936, 
		0.113479, 
		0.120446, 
		-0.106522, 
		0.064550, 
		-0.119532, 
		0.147163, 
		0.049669, 
		-0.045935, 
		0.086753, 
		-0.174436, 
		-0.057837, 
		0.005131, 
		0.021182, 
		0.046827, 
		0.010691, 
		0.087389, 
		0.013578, 
		0.168178, 
		-0.010322, 
		0.239251, 
		0.224366, 
		-0.036475, 
		-0.006608, 
		-0.040753, 
		-0.030720, 
		-0.005111, 
		-0.044649, 
		-0.108186, 
		-0.222565, 
		0.110806, 
		0.111770, 
		0.037858, 
		0.103918, 
		0.005839, 
		0.027412, 
		0.068088, 
		0.114336, 
		-0.023957, 
		-0.164115, 
		-0.087237, 
		-0.088846, 
		-0.043673, 
		0.051210, 
		0.126258, 
		-0.017559, 
		0.059338, 
		0.026200, 
		0.081864, 
		0.006163, 
		0.083542, 
		0.047796, 
		0.135126, 
		0.215148, 
		0.023320, 
		-0.003845, 
		-0.039897, 
		0.011795, 
		-0.006340, 
		-0.116443, 
		-0.137078, 
		0.175519, 
		-0.034119, 
		0.201111, 
		0.016178, 
		-0.180240, 
		-0.179511, 
		0.054459, 
		-0.141360, 
		-0.039992, 
		0.088314, 
		-0.008700, 
		0.174552, 
		0.066269, 
		-0.157182, 
		0.190180, 
		0.044307, 
		0.013733, 
		-0.043395, 
		0.008853, 
		-0.140923, 
		0.028165, 
		0.125276, 
		-0.224783, 
		0.154413, 
		0.032783, 
		-0.060641, 
		-0.169542, 
		-0.089475, 
		-0.085487, 
		0.011255, 
		-0.311710, 
		-0.062649, 
		0.091362, 
		0.112875, 
		0.136149, 
		-0.017496, 
		0.108158, 
		0.101233, 
		-0.035971, 
		-0.054083, 
		0.078307, 
		-0.074546, 
		-0.187601, 
		-0.135495, 
		-0.099872, 
		0.067292, 
		0.053175, 
		0.099080, 
		-0.019235, 
		0.069850, 
		-0.011667, 
		-0.099770, 
		-0.000654, 
		0.077026, 
		0.143172, 
		0.118132, 
		-0.197256, 
		0.003304, 
		-0.102901, 
		0.149129, 
		-0.089242, 
		0.002414, 
		0.302448, 
		0.015862, 
		0.147044, 
		-0.024623, 
		0.033539, 
		-0.083351, 
		-0.002763, 
		-0.076236, 
		0.087464, 
		0.002196, 
		-0.011419, 
		-0.086201, 
		0.112387, 
		-0.205370, 
		-0.100867, 
		-0.094504, 
		-0.016746, 
		0.013904, 
		0.008790, 
		0.059941, 
		0.002973, 
		-0.045985, 
		-0.013664, 
		-0.153808, 
		-0.076752, 
		-0.033384, 
		0.272455, 
		-0.015081, 
		-0.099555, 
		-0.109014, 
		0.095071, 
		-0.004828, 
		-0.222163, 
		-0.032474, 
		-0.111677, 
		0.025960, 
		-0.110240, 
		0.064550, 
		0.075506, 
		0.068736, 
		-0.028904, 
		-0.001849, 
		-0.088401, 
		0.024699, 
		-0.131322, 
		0.140150, 
		-0.096099, 
		0.020131, 
		0.062451, 
		0.097988, 
		-0.009544, 
		0.031549, 
		0.014834, 
		0.043810, 
		0.004723, 
		0.061927, 
		-0.135025, 
		0.161424, 
		0.179318, 
		-0.001747, 
		-0.070811, 
		-0.017707, 
		0.016176, 
		-0.008048, 
		-0.135469, 
		0.073028, 
		-0.076564, 
		0.010152, 
		0.115272, 
		-0.024148, 
		-0.046156, 
		-0.047271, 
		0.054403, 
		0.085785, 
		0.020494, 
		-0.074625, 
		-0.060956, 
		-0.092273, 
		-0.211134, 
		-0.000295, 
		-0.081918, 
		0.133608, 
		0.018052, 
		-0.053061, 
		0.035752, 
		-0.054823, 
		-0.024130, 
		-0.141842, 
		0.056731, 
		-0.101201, 
		-0.076450, 
		-0.023707, 
		0.005187, 
		0.080740, 
		0.022648, 
		-0.028959, 
		0.145999, 
		0.048935, 
		0.146425, 
		-0.047846, 
		-0.082107, 
		0.166041, 
		0.150831, 
		-0.012434, 
		-0.103353, 
		0.171415, 
		-0.167299, 
		-0.057964, 
		0.061472, 
		-0.034974, 
		-0.070047, 
		0.074475, 
		-0.037083, 
		-0.217632, 
		-0.000786, 
		-0.041955, 
		-0.005420, 
		0.032478, 
		-0.012155, 
		0.125216, 
		0.040372, 
		-0.044161, 
		-0.067912, 
		0.007110, 
		0.198946, 
		-0.065861, 
		0.065158, 
		0.004267, 
		-0.072817, 
		0.098770, 
		0.045802, 
		0.011028, 
		-0.104237, 
		0.132449, 
		-0.131690, 
		-0.085495, 
		0.008822, 
		0.012137, 
		-0.034450, 
		-0.101154, 
		-0.128697, 
		0.184483, 
		0.236332, 
		-0.015584, 
		0.088485, 
		0.170883, 
		0.002308, 
		0.050333, 
		0.033514, 
		-0.224632, 
		-0.004480, 
		-0.118134, 
		-0.175319, 
		0.134948, 
		-0.030876, 
		0.023604, 
		-0.124632, 
		-0.081728, 
		0.182856, 
		0.025010, 
		-0.141520, 
		-0.174548, 
		0.155533, 
		0.083393, 
		-0.201292, 
		-0.189609, 
		-0.095811, 
		-0.196311, 
		0.029160, 
		-0.060483, 
		0.189494, 
		0.057727, 
		-0.217989, 
		-0.209358, 
		0.134498, 
		-0.132902, 
		-0.027830, 
		0.031888, 
		0.029583, 
		-0.001516, 
		0.041606, 
		-0.110250, 
		0.011214, 
		0.163035, 
		-0.077072, 
		0.035220, 
		0.062008, 
		-0.024058, 
		-0.071404, 
		-0.245555, 
		-0.177077, 
		0.011188, 
		-0.283730, 
		-0.203583, 
		-0.003243, 
		0.116739, 
		-0.093619, 
		0.092925, 
		0.140449, 
		0.046202, 
		-0.131958, 
		0.053045, 
		0.103781, 
		-0.115207, 
		0.219445, 
		-0.005426, 
		0.139196, 
		0.096593, 
		-0.038818, 
		0.004797, 
		0.009132, 
		-0.060554, 
		0.056231, 
		-0.014127, 
		-0.008166, 
		-0.269790, 
		-0.086971, 
		-0.176840, 
		-0.207771, 
		0.008071, 
		0.252446, 
		-0.089598, 
		-0.087330, 
		0.008739, 
		-0.210773, 
		0.074646, 
		0.038401, 
		-0.025109, 
		-0.187050, 
		0.029151, 
		-0.000542, 
		0.024052, 
		0.014280, 
		-0.022360, 
		0.116574, 
		-0.053572, 
		0.125263, 
		0.061887, 
		0.222276, 
		0.078025, 
		-0.078220, 
		0.158088, 
		-0.031025, 
		-0.032844, 
		0.005258, 
		0.033405, 
		-0.010187, 
		0.087229, 
		-0.058131, 
		-0.050996, 
		0.033953, 
		0.015747, 
		0.126054, 
		-0.038115, 
		-0.012958, 
		-0.010851, 
		-0.045630, 
		-0.117930, 
		0.073742, 
		-0.042537, 
		-0.072451, 
		-0.036249, 
		-0.147512, 
		0.063587, 
		-0.048942, 
		0.150360, 
		0.072968, 
		-0.069891, 
		0.141544, 
		-0.065919, 
		0.085134, 
		0.010988, 
		-0.113490, 
		-0.257418, 
		-0.008764, 
		-0.001223, 
		0.004864, 
		0.065494, 
		-0.009539, 
		-0.140307, 
		-0.067093, 
		-0.188776, 
		-0.153796, 
		0.012513, 
		-0.090653, 
		-0.001413, 
		0.161954, 
		-0.013178, 
		0.020311, 
		-0.102988, 
		-0.009830, 
		-0.101952, 
		-0.128281, 
		0.041515, 
		0.061207, 
		0.054197, 
		0.104276, 
		-0.037996, 
		0.017263, 
		-0.056296, 
		0.061337, 
		-0.009992, 
		0.087565, 
		0.050561, 
		-0.008060, 
		-0.017038, 
		-0.042224, 
		-0.019807, 
		-0.012178, 
		0.040979, 
		0.005885, 
		0.181425, 
		-0.125884, 
		-0.002451, 
		-0.077352, 
		-0.002903, 
		-0.043389, 
		0.042860, 
		-0.037513, 
		0.011130, 
		0.192085, 
		-0.065109, 
		0.058439, 
		-0.038794, 
		0.069675, 
		-0.026632, 
		-0.090737, 
		0.017598, 
		0.092646, 
		-0.056878, 
		-0.162864, 
		0.013773, 
		-0.025461, 
		-0.228686, 
		-0.156355, 
		-0.005457, 
		0.014913, 
		-0.078862, 
		0.003221, 
		0.011492, 
		0.015644, 
		0.029020, 
		0.006645, 
		0.108028, 
		-0.121450, 
		-0.072309, 
		0.054886, 
		-0.005365, 
		-0.088465, 
		-0.051772, 
		0.063712, 
		-0.011279, 
		-0.044687, 
		-0.052754, 
		-0.074114, 
		0.016441, 
		0.084518, 
		0.093898, 
		0.157495, 
		0.192847, 
		-0.191906, 
		-0.112786, 
		0.014230, 
		0.126935, 
		0.143233, 
		-0.062200, 
		-0.074245, 
		0.017738, 
		-0.018836, 
		0.004874, 
		0.007338, 
		0.047182, 
		-0.014680, 
		0.198347, 
		-0.015051, 
		0.049948, 
		-0.017487, 
		0.176971, 
		0.059783, 
		0.035114, 
		0.190667, 
		0.053710, 
		-0.125716, 
		0.001013, 
		-0.196996, 
		-0.043147, 
		-0.158589, 
		0.104781, 
		0.288124, 
		-0.110271, 
		0.213244, 
		0.078639, 
		-0.037599, 
		-0.189069, 
		-0.053574, 
		0.129630, 
		-0.119172, 
		0.154155, 
		-0.041001, 
		-0.103650, 
		0.101897, 
		0.047306, 
		0.024354, 
		0.093397, 
		0.050395, 
		0.136636, 
		-0.013036, 
		0.060656, 
		0.142992, 
		0.081060, 
		-0.172855, 
		-0.061317, 
		0.226793, 
		0.018579, 
		0.045524, 
		0.004706, 
		-0.070373, 
		0.049312, 
		0.063955, 
		0.116593, 
		0.083597, 
		-0.048280, 
		0.180088, 
		-0.065239, 
		-0.133817, 
		-0.096800, 
		-0.053398, 
		0.014996, 
		0.073726, 
		-0.048692, 
		-0.032367, 
		-0.027049, 
		-0.061704, 
		0.057523, 
		0.032865, 
		0.012614, 
		-0.033889, 
		0.063438, 
		-0.008198, 
		0.235434, 
		0.173634, 
		0.074179, 
		-0.174179, 
		0.034284, 
		0.096129, 
		0.231640, 
		0.058377, 
		-0.008227, 
		0.357918, 
		0.233298, 
		-0.052115, 
		-0.071821, 
		-0.225251, 
		-0.079491, 
		-0.028991, 
		0.074188, 
		0.114773, 
		-0.097285, 
		-0.010374, 
		0.073385, 
		0.191745, 
		0.066196, 
		0.040175, 
		0.202987, 
		-0.046738, 
		0.137620, 
		-0.006509, 
		-0.018600, 
		0.011681, 
		-0.141514, 
		-0.009847, 
		-0.179679, 
		0.092868, 
		-0.162434, 
		0.175726, 
		0.017078, 
		0.071723, 
		0.024784, 
		0.014893, 
		-0.018395, 
		0.201067, 
		0.034248, 
		-0.069042, 
		-0.071472, 
		0.211866, 
		-0.048601, 
		0.020082, 
		-0.078541, 
		0.069970, 
		-0.036245, 
		0.062189, 
		0.135516, 
		-0.063483, 
		-0.076775, 
		0.052526, 
		0.063398, 
		-0.096057, 
		0.101275, 
		-0.020373, 
		-0.018884, 
		0.009874, 
		0.139368, 
		-0.002141, 
		0.087940, 
		0.060708, 
		-0.027423, 
		0.167798, 
		0.003137, 
		0.082382, 
		0.047124, 
		0.047497, 
		-0.010230, 
		0.031605, 
		0.022736, 
		-0.100048, 
		0.063916, 
		-0.081295, 
		-0.005013, 
		0.195254, 
		-0.003277, 
		-0.132764, 
		0.133609, 
		0.154910, 
		-0.160997, 
		-0.079427, 
		0.041305, 
		0.206610, 
		0.077421, 
		-0.123699, 
		0.113616, 
		-0.012105, 
		-0.026146, 
		0.002357, 
		0.061093, 
		0.010624, 
		-0.014714, 
		0.110400, 
		0.068049, 
		0.211298, 
		0.030319, 
		0.184948, 
		0.070663, 
		0.078579, 
		0.006252, 
		0.141694, 
		-0.002794, 
		0.120407, 
		-0.091563, 
		0.004876, 
		0.046152, 
		0.138298, 
		-0.113540, 
		-0.042682, 
		-0.089934, 
		0.020117, 
		0.087783, 
		0.147949, 
		-0.112431, 
		-0.085501, 
		-0.096307, 
		0.061746, 
		0.160477, 
		0.016398, 
		0.060896, 
		0.000285, 
		0.091207, 
		0.012921, 
		0.214518, 
		-0.177208, 
		0.108313, 
		0.013406, 
		-0.039783, 
		-0.096343, 
		0.227409, 
		0.045520, 
		-0.018691, 
		-0.046526, 
		0.053614, 
		-0.200611, 
		0.061406, 
		0.191372, 
		-0.008557, 
		0.068464, 
		0.151433, 
		-0.070448, 
		0.108935, 
		-0.161298, 
		0.010138, 
		-0.183363, 
		0.091206, 
		0.156270, 
		0.101091, 
		0.071953, 
		0.056604, 
		-0.044346, 
		-0.008060, 
		0.004343, 
		-0.180193, 
		-0.000787, 
		0.264137, 
		0.114297, 
		0.072132, 
		0.170192, 
		-0.011868, 
		0.085808, 
		-0.078333, 
		0.108142, 
		-0.016723, 
		0.005632, 
		0.000481, 
		-0.046862, 
		0.040904, 
		-0.242811, 
		0.054808, 
		0.069322, 
		-0.079592, 
		0.060701, 
		-0.014410, 
		-0.016626, 
		0.010122, 
		0.158443, 
		0.010638, 
		-0.285930, 
		0.039886, 
		-0.118436, 
		0.091820, 
		0.019002, 
		-0.022211, 
		-0.056505, 
		0.017553, 
		-0.017544, 
		-0.094969, 
		-0.020996, 
		0.029469, 
		-0.303265, 
		0.030537, 
		0.059999, 
		0.322304, 
		0.135579, 
		-0.017923, 
		0.391965, 
		-0.004007, 
		0.001849, 
		-0.119663, 
		-0.092683, 
		-0.064614, 
		-0.092041, 
		-0.069681, 
		-0.078074, 
		-0.084796, 
		-0.172812, 
		-0.106156, 
		0.008595, 
		0.216141, 
		0.111987, 
		0.123932, 
		-0.070845, 
		-0.008763, 
		0.001500, 
		0.038731, 
		-0.010389, 
		-0.125629, 
		-0.009822, 
		-0.144512, 
		0.005528, 
		-0.179237, 
		-0.253183, 
		0.006221, 
		-0.064571, 
		0.049234, 
		0.162410, 
		-0.032510, 
		0.191718, 
		-0.026120, 
		-0.054426, 
		-0.066672, 
		0.129674, 
		0.090693, 
		0.106722, 
		-0.000615, 
		0.029725, 
		-0.001325, 
		-0.018270, 
		0.006193, 
		-0.033902, 
		0.052845, 
		0.107662, 
		-0.002086, 
		-0.007957, 
		-0.048665, 
		-0.003317, 
		0.006540, 
		0.004477, 
		0.055224, 
		-0.001143, 
		-0.045676, 
		0.077289, 
		-0.008223, 
		0.097501, 
		-0.001164, 
		-0.089740, 
		-0.009352, 
		0.014487, 
		-0.000856, 
		-0.077161, 
		0.066491, 
		-0.025464, 
		-0.005553, 
		-0.074706, 
		0.036206, 
		0.010665, 
		0.064956, 
		0.001731, 
		-0.086205, 
		0.021249, 
		0.114396, 
		-0.024831, 
		-0.164787, 
		-0.052365, 
		-0.002847, 
		-0.059048, 
		-0.075010, 
		0.006516, 
		0.037632, 
		-0.013232, 
		-0.126179, 
		-0.011536, 
		-0.052035, 
		-0.004743, 
		-0.119812, 
		-0.227885, 
		0.018406, 
		0.013944, 
		0.141138, 
		-0.087366, 
		-0.005522, 
		0.211366, 
		-0.063018, 
		-0.019535, 
		0.028457, 
		-0.025451, 
		0.086420, 
		0.110297, 
		-0.002340, 
		-0.104750, 
		0.009245, 
		0.118581, 
		-0.135969, 
		0.105571, 
		0.075108, 
		-0.020003, 
		0.060255, 
		-0.136641, 
		-0.088352, 
		-0.023493, 
		-0.092406, 
		0.040614, 
		-0.225351, 
		-0.007673, 
		-0.033395, 
		0.207044, 
		-0.214784, 
		0.122427, 
		0.049730, 
		-0.081531, 
		0.042818, 
		0.198519, 
		-0.045171, 
		0.199691, 
		-0.163682, 
		0.194640, 
		-0.122728, 
		0.139393, 
		0.038964, 
		-0.070321, 
		0.093207, 
		0.104099, 
		-0.173345, 
		-0.046389, 
		0.185251, 
		0.116142, 
		0.091764, 
		-0.098108, 
		0.078753, 
		0.021295, 
		0.017231, 
		-0.035370, 
		0.078033, 
		0.009925, 
		-0.090900, 
		0.023033, 
		0.111366, 
		-0.129597, 
		0.020926, 
		0.018425, 
		-0.022605, 
		0.014139, 
		0.144673, 
		-0.032653, 
		-0.046480, 
		-0.104011, 
		0.029364, 
		0.060554, 
		0.005418, 
		0.292545, 
		0.035496, 
		0.100882, 
		0.152398, 
		-0.079264, 
		0.117394, 
		0.105338, 
		0.101032, 
		0.051130, 
		0.168372, 
		0.146442, 
		0.019788, 
		0.031058, 
		-0.023853, 
		-0.005809, 
		-0.099348, 
		-0.012546, 
		0.010147, 
		-0.016014, 
		-0.030037, 
		0.141732, 
		0.000899, 
		0.012911, 
		-0.010774, 
		0.179661, 
		0.050194, 
		-0.061757, 
		0.009734, 
		0.132146, 
		0.011406, 
		-0.086045, 
		-0.048431, 
		-0.182225, 
		0.101278, 
		0.138944, 
		0.063218, 
		-0.061089, 
		-0.115225, 
		0.056008, 
		0.025059, 
		-0.130018, 
		-0.104952, 
		0.077457, 
		0.020685, 
		0.019191, 
		-0.040707, 
		-0.000418, 
		0.040458, 
		0.022013, 
		-0.202265, 
		0.000221, 
		-0.123973, 
		0.101956, 
		-0.011723, 
		-0.151395, 
		-0.017131, 
		0.032479, 
		-0.042521, 
		0.045631, 
		0.004318, 
		-0.079375, 
		0.029024, 
		-0.127184, 
		0.064267, 
		0.045881, 
		0.022360, 
		0.010436, 
		0.017563, 
		0.148366, 
		-0.169019, 
		-0.053758, 
		0.013376, 
		-0.152509, 
		0.179005, 
		0.040583, 
		0.110747, 
		-0.034909, 
		-0.019323, 
		-0.030659, 
		0.030576, 
		0.025985, 
		-0.195242, 
		-0.000006, 
		0.003037, 
		0.142499, 
		0.022336, 
		-0.141178, 
		-0.004262, 
		0.128794, 
		-0.015955, 
		0.159508, 
		-0.013396, 
		-0.057819, 
		-0.108779, 
		0.016911, 
		-0.041478, 
		0.038278, 
		-0.001159, 
		-0.054714, 
		-0.044869, 
		0.096325, 
		0.013060, 
		0.117204, 
		0.034396, 
		-0.146350, 
		0.199880, 
		0.048808, 
		-0.100020, 
		0.086204, 
		0.060356, 
		0.015852, 
		-0.013600, 
		-0.040201, 
		0.190033, 
		0.003631, 
		0.193263, 
		0.084363, 
		0.156583, 
		0.120099, 
		-0.008994, 
		-0.190124, 
		0.013618, 
		-0.122121, 
		0.052676, 
		-0.011642, 
		-0.079603, 
		0.006616, 
		0.111665, 
		-0.286817, 
		-0.064267, 
		0.093079, 
		-0.083073, 
		0.012446, 
		-0.076546, 
		0.076987, 
		0.016079, 
		0.011242, 
		0.055726, 
		0.125126, 
		0.062631, 
		-0.074546, 
		-0.006094, 
		-0.022083, 
		-0.078708, 
		-0.002373, 
		0.123329, 
		-0.010528, 
		-0.154338, 
		0.017818, 
		-0.215590, 
		0.010889, 
		0.023912, 
		-0.141549, 
		-0.044108, 
		-0.055717, 
		-0.019340, 
		-0.212589, 
		0.015741, 
		-0.063630, 
		-0.047934, 
		0.165867, 
		0.018100, 
		0.149107, 
		-0.040072, 
		-0.047230, 
		-0.033171, 
		0.019303, 
		-0.012459, 
		0.056287, 
		0.125809, 
		-0.012762, 
		-0.008597, 
		-0.039963, 
		0.011570, 
		0.013750, 
		0.006589, 
		-0.005615, 
		-0.039709, 
		-0.020100, 
		-0.156839, 
		0.075601, 
		0.078311, 
		0.019957, 
		-0.005858, 
		0.063589, 
		-0.054657, 
		-0.089060, 
		-0.005609, 
		-0.021826, 
		-0.019319, 
		-0.053971, 
		0.012816, 
		0.305498, 
		-0.053546, 
		-0.008636, 
		-0.037315, 
		-0.076948, 
		-0.053086, 
		-0.019802, 
		0.036570, 
		0.100399, 
		0.032782, 
		-0.132205, 
		0.016528, 
		-0.104153, 
		-0.042618, 
		0.009876, 
		0.001615, 
		0.014234, 
		0.175764, 
		-0.021553, 
		-0.092441, 
		0.081158, 
		-0.008070, 
		0.135491, 
		0.002078, 
		0.099936, 
		0.016803, 
		0.039807, 
		-0.000943, 
		-0.189973, 
		0.074952, 
		0.000512, 
		0.064292, 
		-0.128633, 
		0.013376, 
		0.013804, 
		-0.195989, 
		0.095343, 
		0.096853, 
		0.002634, 
		0.165764, 
		-0.043257, 
		-0.197815, 
		0.171685, 
		-0.018411, 
		-0.046866, 
		0.004933, 
		-0.017212, 
		0.002463, 
		0.055909, 
		-0.217476, 
		0.000459, 
		0.178664, 
		-0.221235, 
		0.024026, 
		0.065181, 
		-0.011187, 
		-0.108816, 
		-0.201718, 
		0.144013, 
		-0.020510, 
		-0.293445, 
		-0.099596, 
		-0.196371, 
		0.079036, 
		-0.072234, 
		0.103394, 
		0.063040, 
		0.101421, 
		-0.128403, 
		0.020638, 
		-0.055835, 
		-0.134338, 
		-0.041110, 
		0.099254, 
		0.180088, 
		0.124114, 
		-0.048936, 
		-0.274526, 
		-0.028486, 
		-0.031324, 
		0.021026, 
		-0.132543, 
		0.003160, 
		0.158419, 
		-0.062287, 
		-0.147830, 
		-0.169890, 
		0.014736, 
		-0.034461, 
		-0.030320, 
		0.051468, 
		-0.009044, 
		0.159750, 
		0.033589, 
		0.066255, 
		-0.084548, 
		0.181509, 
		0.011066, 
		-0.205650, 
		-0.130828, 
		0.164854, 
		-0.131155, 
		0.114562, 
		-0.136300, 
		0.266624, 
		0.063572, 
		0.021158, 
		0.183735, 
		-0.134648, 
		0.018174, 
		-0.000592, 
		-0.110455, 
		0.005319, 
		-0.095603, 
		-0.030420, 
		-0.183474, 
		-0.041477, 
		-0.173386, 
		0.118057, 
		0.014180, 
		0.180639, 
		0.120094, 
		-0.070361, 
		-0.000517, 
		0.283841, 
		0.093511, 
		-0.094308, 
		-0.139477, 
		-0.195495, 
		0.010653, 
		-0.071108
	};

#pragma HLS ARRAY_PARTITION variable=prelu_weight type=complete


	float depth_out[CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_IN_CHANNEL] = {0};
	float inArr[POOL2_OUT_SIZE * POOL2_OUT_SIZE * CONV2_FILTER] = {0};
	stream2arr(input, inArr, POOL2_OUT_SIZE * POOL2_OUT_SIZE * CONV2_FILTER);
	//Depthwise convolution
	for(int filter = 0 ; filter < CONV3_IN_CHANNEL; filter++){
//#pragma HLS PIPELINE
		for(int ify = 0; ify < CONV3_OUT_SIZE; ify++){
			for(int ifx = 0; ifx < CONV3_OUT_SIZE; ifx++){
				int data_offset = CONV3_OUT_SIZE * CONV3_OUT_SIZE * filter + CONV3_OUT_SIZE * ify + ifx;
				float sumArr[CONV3_SIZE] = {0};
				for(int ky = 0; ky < CONV3_SIZE; ky++){
					for(int kx = 0 ; kx < CONV3_SIZE; kx++){
						sumArr[kx] += inArr[filter * POOL2_OUT_SIZE * POOL2_OUT_SIZE + POOL2_OUT_SIZE * (ify + ky) + (ifx + kx)] * dw_weight[CONV3_SIZE * CONV3_SIZE * filter + CONV3_SIZE * ky + kx];
					}
				}
				depth_out[data_offset] = sumArr[0] + sumArr[1];
			}
		}
	}

	//Pointwise convolution
	ConvFilter:
	for(int filter = 0 ; filter < CONV3_FILTER; filter++){
//#pragma HLS PIPELINE
		ConvY:
		for(int ify = 0 ; ify < CONV3_OUT_SIZE; ify++){
			ConvX:
			for(int ifx = 0 ; ifx < CONV3_OUT_SIZE; ifx++){
#pragma HLS PIPELINE ii=20
				int data_offset = filter * CONV3_OUT_SIZE * CONV3_OUT_SIZE + CONV3_OUT_SIZE * ify + ifx;
				float sum = 0;
				ConvChan:
				for(int inChan = 0; inChan < CONV3_IN_CHANNEL; inChan++){
					sum += depth_out[inChan * CONV3_OUT_SIZE * CONV3_OUT_SIZE + CONV3_OUT_SIZE * ify + ifx] * pw_weight[filter * CONV3_IN_CHANNEL + inChan];
				}
				output.write(prelu(sum, prelu_weight[filter]));
			}
		}
	}
	return;
	
}
void SEBlock(hls::stream<float>& input, hls::stream<float>& output){
	float inArr[CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER] = {0};
	stream2arr(input, inArr, CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER);
	float global_average_out[GLOBAL_AVERAGE_OUT * GLOBAL_AVERAGE_OUT * CONV3_FILTER] = {0};
	float seb_fc1_out[8] = {0};
	float seb_fc2_out[64] = {0};
	float seb_fc1_weight[512] = {
		-0.000012, 	-0.000002, 	0.000024, 	0.002738, 	0.000012, 	0.000008, 	-0.000058, 	0.009489, 	-0.000019, 	-0.000031, 	0.000346, 	0.000568, 	0.000005, 	-0.008249, 	-0.003397, 	-0.000015, 	0.000539, 	-0.000011, 	0.000001, 	0.003962, 	-0.009195, 	-0.001988, 	-0.000013, 	-0.000220, 	-0.000005, 	-0.000054, 	0.000140, 	0.000038, 	-0.007465, 	-0.000016, 	-0.006659, 	-0.001430, 	-0.000493, 	0.000053, 	0.000040, 	0.006076, 	0.000051, 	-0.000229, 	-0.003180, 	0.009737, 	-0.000037, 	0.003492, 	-0.000211, 	-0.001827, 	-0.000015, 	0.000479, 	0.000890, 	0.007093, 	-0.000839, 	-0.000025, 	0.000009, 	0.000000, 	-0.004944, 	-0.000057, 	-0.000055, 	0.000018, 	0.000070, 	-0.000046, 	0.002235, 	-0.009235, 	-0.000048, 	0.000061, 	-0.000005, 	0.008567, 
		-0.000983, 	-0.000377, 	-0.000046, 	-0.000534, 	-0.000033, 	-0.000390, 	0.000044, 	-0.012221, 	0.000391, 	-0.000327, 	0.000253, 	-0.003376, 	0.000723, 	0.000485, 	-0.000993, 	-0.000535, 	0.000154, 	-0.002496, 	0.000033, 	0.001504, 	-0.000215, 	-0.010446, 	0.000345, 	-0.000038, 	0.000248, 	-0.000717, 	0.000154, 	0.000356, 	-0.000279, 	0.000029, 	0.000131, 	0.003281, 	-0.002281, 	0.001609, 	-0.000580, 	0.000008, 	0.000393, 	-0.000103, 	0.000247, 	-0.000166, 	0.000698, 	0.000030, 	0.000401, 	-0.002220, 	0.000214, 	0.000358, 	0.008801, 	0.001008, 	-0.000381, 	-0.000045, 	-0.000003, 	-0.000289, 	0.000064, 	0.000453, 	-0.012732, 	-0.000030, 	-0.004344, 	0.005586, 	0.000733, 	-0.000121, 	0.000694, 	-0.002877, 	-0.000363, 	0.000269, 
		0.009863, 	-0.011577, 	-0.000357, 	0.005840, 	-0.000034, 	-0.007151, 	-0.004450, 	-0.000363, 	-0.004229, 	-0.008444, 	-0.000085, 	-0.000127, 	0.000565, 	0.012228, 	0.000126, 	-0.000757, 	0.000509, 	0.004178, 	-0.000510, 	-0.000637, 	0.002804, 	-0.000062, 	-0.001303, 	0.000091, 	0.000405, 	0.000735, 	0.000050, 	0.000937, 	-0.000360, 	-0.000223, 	0.001079, 	-0.000096, 	-0.000251, 	0.000417, 	0.000187, 	0.001885, 	0.000685, 	0.005352, 	-0.000257, 	-0.000465, 	0.009897, 	0.000067, 	0.000152, 	-0.000094, 	-0.000559, 	0.000949, 	-0.005166, 	-0.000942, 	-0.007215, 	-0.000324, 	-0.010341, 	0.000139, 	-0.000415, 	-0.000172, 	0.006822, 	-0.000362, 	-0.000362, 	0.000976, 	-0.000451, 	0.000231, 	-0.000099, 	0.004001, 	-0.000448, 	-0.003880, 
		-0.007348, 	0.003176, 	0.006907, 	0.000336, 	0.000210, 	0.000624, 	0.000091, 	-0.003929, 	0.000175, 	-0.007548, 	0.000042, 	0.007769, 	0.000578, 	0.000060, 	-0.000016, 	0.000514, 	0.000301, 	-0.000026, 	0.000002, 	0.000176, 	0.004819, 	0.000025, 	0.000151, 	0.000185, 	0.001986, 	0.000147, 	-0.012588, 	0.000483, 	0.005068, 	-0.003750, 	0.002349, 	0.000155, 	-0.003888, 	0.002815, 	0.000273, 	-0.000035, 	0.000453, 	0.000428, 	-0.000044, 	-0.000701, 	-0.012757, 	0.002318, 	0.000336, 	-0.000126, 	0.000351, 	-0.001199, 	-0.003192, 	0.000015, 	0.000279, 	0.000236, 	-0.011437, 	0.007045, 	0.000036, 	-0.000639, 	-0.000063, 	-0.008398, 	0.000061, 	0.000102, 	-0.000001, 	-0.000178, 	-0.000207, 	0.000624, 	0.001393, 	-0.012871, 
		0.001892, 	0.000471, 	0.002103, 	0.001567, 	0.000209, 	-0.000098, 	0.000093, 	-0.002818, 	0.002337, 	0.001342, 	0.002909, 	0.000700, 	-0.001076, 	0.003064, 	0.000225, 	0.001828, 	0.004340, 	0.000391, 	-0.000147, 	0.000696, 	0.002813, 	0.000804, 	0.001000, 	0.001044, 	0.001173, 	0.002278, 	0.010327, 	0.016282, 	0.001867, 	0.000519, 	0.000600, 	0.008387, 	0.000780, 	0.000533, 	0.015206, 	0.000177, 	0.000759, 	0.000458, 	0.000184, 	0.000764, 	0.011984, 	0.002206, 	0.002644, 	-0.000140, 	0.000043, 	0.000696, 	0.006401, 	-0.006599, 	0.002721, 	0.001282, 	0.010669, 	0.000631, 	0.000715, 	0.006579, 	0.000653, 	0.001069, 	0.000627, 	-0.003479, 	0.004890, 	0.001530, 	-0.007876, 	-0.005250, 	0.009951, 	-0.002741, 
		-0.000283, 	0.000060, 	-0.000010, 	-0.001162, 	-0.000077, 	0.000079, 	-0.000050, 	0.000032, 	-0.010414, 	-0.001073, 	-0.000334, 	-0.000161, 	0.000995, 	-0.000104, 	-0.008416, 	0.006149, 	-0.000204, 	-0.007637, 	-0.000068, 	0.006358, 	-0.010762, 	0.001338, 	0.004580, 	-0.000090, 	-0.000164, 	-0.000076, 	-0.000022, 	-0.000250, 	0.000057, 	-0.000099, 	-0.005694, 	-0.000085, 	0.000608, 	-0.000121, 	-0.000148, 	-0.000075, 	-0.000118, 	0.000068, 	0.000004, 	-0.000672, 	-0.000259, 	0.003898, 	-0.000682, 	-0.005991, 	-0.000063, 	-0.005738, 	-0.000208, 	-0.000216, 	0.003227, 	-0.000084, 	-0.001443, 	-0.008914, 	0.000018, 	-0.000164, 	-0.002783, 	0.002440, 	0.000087, 	-0.000309, 	0.008486, 	0.000186, 	-0.000072, 	-0.004548, 	0.000253, 	-0.000162, 
		-0.000329, 	0.000001, 	-0.000089, 	0.000018, 	-0.000034, 	-0.000293, 	0.000095, 	-0.000138, 	-0.000276, 	-0.000111, 	-0.002270, 	-0.000211, 	-0.000316, 	-0.000258, 	-0.000021, 	0.000005, 	-0.000318, 	-0.000001, 	-0.000248, 	-0.006572, 	-0.000183, 	0.000045, 	-0.001213, 	0.000039, 	-0.011844, 	-0.000173, 	-0.000188, 	-0.000552, 	0.009470, 	-0.000097, 	0.004781, 	0.000015, 	-0.000075, 	-0.000299, 	-0.000296, 	-0.000024, 	-0.011180, 	0.000022, 	-0.001827, 	0.000326, 	-0.000268, 	-0.000228, 	-0.000152, 	0.005546, 	0.000028, 	0.000074, 	-0.000400, 	-0.000133, 	0.003352, 	0.007979, 	-0.000029, 	0.000081, 	0.000025, 	-0.000231, 	0.008280, 	0.000122, 	-0.000041, 	-0.000236, 	-0.000057, 	-0.000027, 	-0.000017, 	-0.005255, 	0.007434, 	0.000140, 
		-0.000400, 	0.000050, 	-0.000216, 	-0.000101, 	-0.000274, 	-0.000166, 	0.000057, 	-0.000117, 	-0.000506, 	-0.000023, 	-0.000141, 	-0.000115, 	-0.000571, 	-0.000254, 	-0.002058, 	-0.000009, 	0.003686, 	-0.000093, 	-0.000099, 	-0.000235, 	-0.000376, 	-0.000041, 	0.000099, 	0.000012, 	-0.010489, 	-0.000551, 	-0.000536, 	0.002521, 	-0.000405, 	0.006630, 	-0.000176, 	-0.006425, 	0.000043, 	-0.000254, 	-0.000427, 	-0.000001, 	-0.000276, 	0.000057, 	0.004716, 	-0.000909, 	-0.000431, 	-0.000232, 	-0.000489, 	0.000130, 	0.003703, 	0.000107, 	-0.001253, 	-0.000214, 	0.000322, 	0.000027, 	-0.000011, 	0.000106, 	-0.000065, 	-0.000237, 	0.002938, 	-0.000025, 	-0.000139, 	-0.000547, 	0.000186, 	-0.000129, 	0.000016, 	-0.000275, 	-0.000004, 	-0.000018, 
	};
	float seb_fc2_weight[512] = {
		0.000041, 	0.000341, 	0.007550, 	0.000057, 	0.002830, 	-0.000007, 	0.000168, 	0.000016, 
		-0.000011, 	0.000139, 	-0.000024, 	0.000159, 	0.001379, 	0.003541, 	-0.000069, 	0.000321, 
		0.000034, 	0.000231, 	0.000310, 	0.002760, 	0.002274, 	0.000026, 	-0.000107, 	0.000041, 
		-0.005929, 	0.000357, 	0.000016, 	0.003436, 	0.002908, 	0.008382, 	-0.006647, 	-0.000065, 
		-0.000011, 	-0.010748, 	-0.000007, 	0.000481, 	-0.001857, 	0.000021, 	0.000209, 	0.000038, 
		0.000005, 	0.000703, 	0.000384, 	0.000266, 	-0.000771, 	0.000004, 	0.000540, 	-0.000040, 
		-0.003821, 	0.003609, 	0.000097, 	-0.000031, 	0.000288, 	-0.010569, 	-0.000018, 	0.000035, 
		-0.000009, 	0.000199, 	0.000123, 	0.000031, 	0.002401, 	-0.002031, 	-0.008828, 	0.000045, 
		-0.000729, 	0.000105, 	-0.000085, 	0.000246, 	0.001050, 	0.000025, 	0.000048, 	0.000017, 
		-0.000011, 	0.000008, 	-0.000214, 	0.000209, 	0.002132, 	-0.000029, 	-0.000192, 	-0.000007, 
		-0.002571, 	0.000175, 	-0.000166, 	-0.003340, 	0.000351, 	-0.000000, 	-0.000011, 	0.012558, 
		-0.003284, 	-0.010197, 	0.011538, 	0.000009, 	0.001117, 	0.000001, 	0.000006, 	0.000299, 
		0.006865, 	0.001325, 	-0.000309, 	0.001866, 	0.000568, 	0.010930, 	0.000431, 	-0.004341, 
		0.000005, 	0.000265, 	0.000481, 	-0.001742, 	0.002397, 	-0.000003, 	0.000045, 	0.000035, 
		0.000000, 	0.000032, 	-0.001180, 	0.000002, 	0.000484, 	0.001103, 	-0.000421, 	0.000003, 
		-0.003502, 	0.000146, 	0.000034, 	0.000126, 	0.001508, 	0.000112, 	-0.000095, 	-0.007643, 
		-0.000372, 	0.000231, 	0.001990, 	0.000039, 	0.000665, 	-0.000080, 	-0.001962, 	-0.000088, 
		0.000000, 	-0.000272, 	0.000481, 	-0.000008, 	0.001478, 	0.000006, 	-0.000011, 	0.000016, 
		-0.000696, 	-0.009026, 	0.000754, 	0.000218, 	0.002738, 	0.000066, 	-0.007837, 	-0.006571, 
		0.000056, 	0.000369, 	0.000014, 	0.000244, 	0.012597, 	-0.003632, 	0.000026, 	-0.000060, 
		-0.000010, 	0.000505, 	-0.001366, 	-0.000020, 	-0.006833, 	0.012627, 	-0.000017, 	0.000283, 
		-0.001682, 	0.000757, 	0.000121, 	0.000010, 	0.000221, 	-0.009959, 	0.000872, 	0.000121, 
		0.000100, 	0.007469, 	0.000860, 	0.002169, 	0.004213, 	0.000202, 	0.003318, 	-0.000113, 
		0.000035, 	0.001238, 	0.000134, 	0.000617, 	0.003419, 	-0.006655, 	0.008478, 	0.000005, 
		-0.000022, 	0.000901, 	0.000586, 	-0.000061, 	-0.005147, 	-0.000041, 	0.004268, 	0.003836, 
		0.000361, 	0.000749, 	0.001303, 	0.008632, 	0.011110, 	0.000009, 	0.000142, 	0.000028, 
		0.001940, 	-0.003296, 	0.000422, 	-0.000001, 	0.007429, 	-0.000027, 	-0.000023, 	-0.009572, 
		0.000057, 	0.000011, 	0.000113, 	0.001541, 	0.002882, 	0.000091, 	-0.005681, 	-0.000868, 
		0.000368, 	0.000585, 	-0.008191, 	0.000034, 	-0.006993, 	0.000013, 	0.000220, 	-0.000932, 
		-0.000656, 	0.000002, 	0.000090, 	-0.007894, 	0.002591, 	-0.000021, 	0.000020, 	0.000032, 
		0.007317, 	0.000313, 	0.008950, 	0.000401, 	0.002883, 	-0.005408, 	-0.000138, 	0.000016, 
		-0.000029, 	0.000143, 	0.000198, 	-0.006816, 	0.001638, 	0.002449, 	-0.007654, 	-0.006147, 
		-0.001697, 	0.000081, 	0.003846, 	-0.000409, 	0.001169, 	0.000036, 	-0.000068, 	0.000668, 
		-0.011372, 	0.000189, 	0.000186, 	-0.000116, 	0.001893, 	-0.002843, 	-0.000012, 	0.000022, 
		-0.000036, 	-0.001383, 	0.013329, 	-0.005470, 	0.003421, 	-0.000038, 	0.000245, 	-0.000101, 
		0.000010, 	-0.000063, 	0.000266, 	0.000318, 	-0.004164, 	0.000020, 	0.000071, 	0.000135, 
		0.000095, 	0.000250, 	0.000342, 	0.011956, 	0.008424, 	-0.000007, 	0.000158, 	0.000110, 
		0.012151, 	-0.000057, 	-0.003011, 	0.000005, 	0.001104, 	0.012572, 	0.000208, 	0.000148, 
		0.000002, 	0.001218, 	-0.000494, 	-0.000059, 	-0.005218, 	-0.000909, 	-0.000028, 	-0.000579, 
		0.004066, 	0.000102, 	0.000026, 	0.000100, 	0.001042, 	0.000006, 	-0.000143, 	0.000010, 
		-0.000020, 	-0.006282, 	-0.002949, 	-0.005846, 	0.002993, 	0.000001, 	0.003231, 	0.000096, 
		0.000019, 	0.000358, 	-0.004305, 	0.000409, 	0.003082, 	-0.000091, 	0.000249, 	0.000011, 
		0.000061, 	-0.009666, 	-0.000372, 	0.005467, 	0.000404, 	-0.003580, 	-0.000245, 	0.000006, 
		0.000024, 	0.000188, 	0.000173, 	0.000119, 	0.000922, 	-0.002790, 	0.000257, 	-0.000010, 
		-0.001633, 	0.002631, 	0.000057, 	0.000008, 	0.000642, 	-0.000000, 	0.011158, 	0.001446, 
		-0.000032, 	0.000439, 	0.000185, 	0.000016, 	0.001482, 	-0.000002, 	0.000252, 	0.000106, 
		0.000138, 	0.000448, 	0.000667, 	0.000148, 	0.005460, 	-0.000055, 	0.000192, 	0.000601, 
		0.000023, 	0.004214, 	0.000366, 	-0.010966, 	0.005080, 	-0.009303, 	0.000030, 	-0.010951, 
		0.000007, 	0.000950, 	-0.000008, 	0.000587, 	0.003538, 	-0.000286, 	0.005100, 	0.008181, 
		0.000043, 	0.004642, 	-0.006158, 	-0.005043, 	0.008398, 	0.000293, 	0.000375, 	-0.000026, 
		-0.000009, 	-0.004066, 	0.000033, 	0.001586, 	0.000388, 	-0.000003, 	-0.001326, 	0.000005, 
		-0.000024, 	-0.002921, 	0.000032, 	0.000075, 	0.001647, 	-0.000016, 	0.004405, 	0.000023, 
		0.000058, 	0.000064, 	0.001589, 	0.000067, 	0.003180, 	-0.001040, 	0.004469, 	-0.004086, 
		0.000023, 	0.000126, 	0.003488, 	0.011919, 	0.004659, 	0.000006, 	-0.003567, 	0.000086, 
		-0.000004, 	-0.000186, 	-0.005220, 	0.006882, 	0.001038, 	0.000006, 	0.000040, 	0.000024, 
		0.000013, 	-0.006896, 	0.000172, 	0.001091, 	0.001108, 	0.000006, 	-0.000114, 	0.005497, 
		0.000890, 	-0.000844, 	-0.000056, 	-0.005037, 	0.000901, 	-0.005135, 	0.000065, 	-0.011532, 
		-0.004051, 	0.006124, 	0.010775, 	-0.000010, 	0.002704, 	-0.011012, 	0.000076, 	0.000069, 
		0.000055, 	0.004159, 	0.000199, 	0.000038, 	0.000815, 	0.000075, 	0.000042, 	-0.003322, 
		-0.000037, 	-0.005222, 	0.000334, 	0.000040, 	0.001991, 	0.003900, 	0.000022, 	0.000033, 
		0.000113, 	-0.000233, 	0.000034, 	0.000003, 	0.000640, 	0.000003, 	0.000004, 	0.008046, 
		0.000023, 	0.013480, 	0.000133, 	-0.000177, 	0.002796, 	0.000587, 	-0.006343, 	0.000010, 
		-0.000011, 	0.003017, 	0.003093, 	0.000172, 	0.002118, 	0.000027, 	-0.008377, 	-0.000007, 
		0.000151, 	0.000066, 	-0.000243, 	0.000307, 	0.004600, 	-0.000027, 	0.000079, 	0.001435
	};

	//Global average pooling
	Pool_channel:
	for (int inChan = 0; inChan < CONV3_FILTER; inChan++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
		Pool_y2:
		for (int ify = 0; ify < GLOBAL_AVERAGE_OUT; ify++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			Pool_x:
			for (int ifx = 0; ifx < GLOBAL_AVERAGE_OUT; ifx++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			//float max = FLOAT_MIN;
				int data_offset = inChan * GLOBAL_AVERAGE_OUT * GLOBAL_AVERAGE_OUT + ify * GLOBAL_AVERAGE_OUT + ifx;
				int out_conv_offset = inChan * CONV3_OUT_SIZE * CONV3_OUT_SIZE + ify * GLOBAL_AVERAGE_STRIDE * CONV3_OUT_SIZE + ifx * GLOBAL_AVERAGE_STRIDE;
				float sumArr[GLOBAL_AVERAGE_SIZE] = {0};
				Ky:
				for (int ky = 0; ky < GLOBAL_AVERAGE_SIZE; ky++) {
#pragma HLS PIPELINE off=false ii=6
#pragma HLS UNROLL off=true
					Kx:
					for (int kx = 0; kx < GLOBAL_AVERAGE_SIZE; kx++) {
#pragma HLS UNROLL off=false
#pragma HLS PIPELINE off=true
						int in_offset = out_conv_offset + ky * CONV3_OUT_SIZE + kx;
//						int val = out_conv2[in_offset];
						if ( ((CONV3_OUT_SIZE - ifx * GLOBAL_AVERAGE_STRIDE) >= GLOBAL_AVERAGE_SIZE) && ((CONV3_OUT_SIZE - ify * GLOBAL_AVERAGE_STRIDE >= GLOBAL_AVERAGE_SIZE))){
							sumArr[kx] += inArr[in_offset]; 
						} else {
							if(kx >= (CONV3_OUT_SIZE - ifx * GLOBAL_AVERAGE_STRIDE)){
								in_offset = in_offset - 1;
							}
							if(ky >= (CONV3_OUT_SIZE - ify * GLOBAL_AVERAGE_STRIDE)){
								in_offset = in_offset - CONV3_OUT_SIZE;
							}
							// max = (out_conv2[in_offset] > max) ? out_conv2[in_offset] : max;
							sumArr[kx] += inArr[in_offset];
						}
					}
				}
				global_average_out[data_offset] = (sumArr[0] + sumArr[1] + sumArr[2])/(GLOBAL_AVERAGE_SIZE * GLOBAL_AVERAGE_SIZE);
			}
		}
	}
//	printMatArr(global_average_out, CONV3_FILTER, GLOBAL_AVERAGE_OUT);

	//Fully connected 1
//	ConvFilter:
	for(int filter = 0 ; filter < SEB_FC1_FILTER_OUT; filter++){
#pragma HLS PIPELINE off
		float sum = 0;
		for(int i = 0 ; i < SEB_FC1_FILTER_IN; i++){
#pragma HLS PIPELINE ii=4
			sum += global_average_out[i] * seb_fc1_weight[filter * SEB_FC1_FILTER_IN + i];
		}
		seb_fc1_out[filter] = relu(sum);
	}

//	printMatArr(seb_fc1_out, SEB_FC1_FILTER_OUT, SEB_FC1_FILTER_IN);

//	//Fully connected 2
	for(int filter = 0 ; filter < SEB_FC2_FILTER_OUT; filter++){
#pragma HLS PIPELINE off
		float sum = 0;
		for(int i = 0 ; i < SEB_FC2_FILTER_IN; i++){
#pragma HLS PIPELINE ii=4
			sum += seb_fc1_out[i] * seb_fc2_weight[filter * SEB_FC2_FILTER_IN + i];
		}
		seb_fc2_out[filter] = sigmoid(sum);
	}
//	printMatArr(seb_fc2_out, SEB_FC2_FILTER_OUT, 1);

	for(int i = 0; i < CONV3_FILTER; i++){
		for(int j = 0 ; j < CONV3_OUT_SIZE * CONV3_OUT_SIZE; j++){
			output.write(inArr[i * CONV3_OUT_SIZE * CONV3_OUT_SIZE + j] * seb_fc2_out[i]);
		}
	}
	return;
}
void flatten_accel(hls::stream<float>& input, hls::stream<float>& output){
	float out_conv3[CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER] = {0};
#pragma HLS BIND_STORAGE variable=out_conv3 type=ram_s2p impl=lutram
	stream2arr(input, out_conv3, CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER);

	for(int filter = 0; filter < CONV3_FILTER; filter++){
		for(int y = 0 ; y < CONV3_OUT_SIZE; y++){
			for(int x = 0 ; x < CONV3_OUT_SIZE; x++){
//				int out_offset = filter * CONV3_OUT_SIZE * CONV3_OUT_SIZE + y * CONV3_OUT_SIZE + x;
				int in_offset = filter * CONV3_OUT_SIZE * CONV3_OUT_SIZE + x * CONV3_OUT_SIZE + y;
				output.write(out_conv3[in_offset]);
			}
		}
	}
	return;

}

void dense_1_accel(hls::stream<float>& input, float* weights, hls::stream<float>& output){
//#pragma HLS INLINE off
//#pragma HLS DATAFLOW
	float bias[128] = {
		0.095876,
		0.065167,
		0.112382,
		0.112785,
		0.099184,
		0.122701,
		0.103234,
		0.088305,
		0.102344,
		0.119906,
		0.061864,
		0.184301,
		0.073586,
		0.092159,
		0.086174,
		0.064655,
		0.143113,
		0.081194,
		0.096083,
		0.090910,
		0.074695,
		0.121918,
		0.099753,
		0.076073,
		0.086191,
		0.071446,
		0.098872,
		0.104710,
		0.099490,
		0.102886,
		0.141065,
		0.075397,
		0.080731,
		0.062048,
		0.073047,
		0.114037,
		0.085615,
		0.097095,
		0.162091,
		0.132615,
		0.054435,
		0.113649,
		0.112838,
		0.135822,
		0.158564,
		0.105041,
		0.087869,
		0.105535,
		0.157645,
		0.128866,
		0.081726,
		0.129409,
		0.134948,
		0.128330,
		0.089267,
		0.141124,
		0.070791,
		0.085806,
		0.081291,
		0.056253,
		0.083354,
		0.109312,
		0.065210,
		0.115982,
		0.113574,
		0.120583,
		0.066835,
		0.070588,
		0.065707,
		0.130315,
		0.152503,
		0.148689,
		0.159376,
		0.143060,
		0.086249,
		0.098080,
		0.076258,
		0.095785,
		0.089983,
		0.085618,
		0.145219,
		0.138629,
		0.067889,
		0.141511,
		0.049291,
		0.085747,
		0.098733,
		0.164061,
		0.086900,
		0.114630,
		0.106168,
		0.105050,
		0.103016,
		0.123930,
		0.104055,
		0.111935,
		0.084772,
		0.089987,
		0.102407,
		0.119801,
		0.092471,
		0.088257,
		0.168968,
		0.094413,
		0.071392,
		0.100166,
		0.105708,
		0.091144,
		0.080513,
		0.114036,
		0.094908,
		0.111345,
		0.085502,
		0.112807,
		0.121290,
		0.088840,
		0.118132,
		0.101622,
		0.078223,
		0.132349,
		0.085229,
		0.065706,
		0.087820,
		0.154366,
		0.074985,
		0.105610,
		0.110786,
		0.104600
	};

	float prelu_weight[128] = {
		-0.003587,
		0.001671,
		0.005354,
		0.000977,
		0.026232,
		-0.015356,
		0.005666,
		0.008425,
		0.005464,
		0.020559,
		0.007999,
		0.024981,
		-0.015360,
		0.005439,
		0.008033,
		-0.011564,
		-0.004977,
		-0.045258,
		-0.002541,
		-0.026094,
		0.005524,
		-0.002379,
		-0.002433,
		0.009560,
		0.005425,
		0.007850,
		0.005425,
		0.020841,
		-0.007871,
		0.011689,
		0.113547,
		0.005037,
		-0.000481,
		0.001900,
		0.005571,
		0.005425,
		0.002574,
		-0.005715,
		0.022725,
		-0.007311,
		0.005387,
		-0.012336,
		0.008680,
		0.019649,
		0.043852,
		0.005677,
		-0.015401,
		0.006811,
		0.003252,
		-0.005470,
		0.005425,
		0.013755,
		0.004939,
		0.042777,
		0.005362,
		-0.006926,
		-0.026060,
		0.004401,
		0.005425,
		-0.027383,
		0.005894,
		0.029032,
		-0.029825,
		-0.010970,
		0.013469,
		0.023276,
		0.003178,
		-0.013991,
		0.001932,
		0.036035,
		-0.015082,
		0.014520,
		0.109166,
		0.061455,
		0.003477,
		0.008952,
		-0.004146,
		-0.001820,
		0.006157,
		0.005425,
		0.012194,
		0.058467,
		0.008932,
		-0.026259,
		-0.019125,
		-0.011976,
		-0.005374,
		0.059866,
		0.005351,
		-0.029838,
		0.010550,
		0.005425,
		0.005483,
		0.090754,
		-0.005976,
		0.018451,
		-0.004686,
		0.005868,
		0.005425,
		0.026261,
		0.005424,
		0.002478,
		0.042652,
		0.005425,
		0.004442,
		0.005425,
		-0.011456,
		0.006587,
		0.005455,
		-0.011325,
		0.007117,
		-0.004800,
		0.005510,
		0.007555,
		0.044673,
		0.001696,
		0.008577,
		0.005570,
		0.005425,
		0.038416,
		0.001748,
		-0.028792,
		0.005895,
		0.117580,
		0.011383,
		0.005793,
		0.020614,
		0.005595
	};
	
#pragma HLS ARRAY_PARTITION variable=bias type=complete
#pragma HLS ARRAY_PARTITION variable=prelu_weight type=complete


#pragma HLS BIND_STORAGE variable=weights type=ram_s2p impl=uram

	float flatten_out_conv3[CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER] = {0};
#pragma HLS BIND_STORAGE variable=flatten_out_conv3 type=ram_s2p impl=lutram

	stream2arr(input, flatten_out_conv3, CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER);

	int in_offset = 0;
	int weight_offset = 0;
	int data_offset = 0;
//	float sum = 0;

	// Convolution layer
	ConvFilter_dense_1:
	for (int filter = 0; filter < FC1_DENSE_SIZE; filter++) {
//#pragma HLS UNROLL off=true
//#pragma HLS PIPELINE ii=4
		float sum = 0;
//		float sumArr[CONV3_FILTER * CONV3_OUT_SIZE * CONV3_OUT_SIZE] = {0};
		ConvY:
		for (int i = 0; i < CONV3_FILTER * CONV3_OUT_SIZE * CONV3_OUT_SIZE; i++) {
#pragma HLS PIPELINE off=false ii=3
//#pragma HLS UNROLL off=true
			weight_offset = filter * CONV3_FILTER * CONV3_OUT_SIZE * CONV3_OUT_SIZE + i;
//			output[filter] += input[i] * weights[weight_offset];
			sum += flatten_out_conv3[i] * weights[weight_offset];
		}
//		for(int i = 0 ; i < CONV3_FILTER * CONV3_OUT_SIZE * CONV3_OUT_SIZE; i++){
//#pragma HLS PIPELINE ii=3
//			sum += sumArr[i];
//		}
		output.write(prelu(sum + bias[filter], prelu_weight[filter]));
//		sum=0;
	}
//	dense_1_out:
//	for(int i = 0 ; i < FC1_DENSE_SIZE; i++){
//		output[i] = prelu(output[i] + bias[i], prelu_weight[i]);
//	}

	return;
	
}

void dense_2_1_accel(hls::stream<float>& input, hls::stream<float>& output){
//#pragma HLS INLINE off
//#pragma HLS DATAFLOW
	float bias[2] = {
		0.157453,
		0.040104,
	};
	float weights[256] = {
		0.016625, 	-0.208209, 	0.113572, 	0.122714, 	0.032380, 	0.180090, 	0.092499, 	0.190736, 	-0.021322, 	0.186192, 	-0.250427, 	0.367946, 	-0.139154, 	-0.145750, 	-0.081046, 	-0.155462, 	0.203615, 	-0.200057, 	0.058473, 	0.214280, 	0.067040, 	0.294074, 	0.131891, 	-0.236351, 	0.035591, 	-0.187479, 	0.113118, 	0.031872, 	-0.026881, 	-0.022597, 	0.322591, 	-0.200131, 	-0.210697, 	-0.302244, 	-0.225036, 	0.019174, 	-0.150372, 	-0.043015, 	0.314304, 	0.119343, 	-0.213178, 	0.253852, 	0.192602, 	0.350070, 	0.278786, 	-0.080547, 	0.112073, 	0.223485, 	0.342899, 	0.243783, 	-0.159862, 	0.102418, 	0.049779, 	0.202082, 	-0.073215, 	0.151466, 	-0.214983, 	-0.012879, 	0.072402, 	-0.208618, 	0.132950, 	0.205518, 	-0.113180, 	0.306587, 	0.257950, 	0.209267, 	-0.172431, 	-0.239461, 	-0.171400, 	0.198311, 	0.329125, 	0.252353, 	0.291852, 	0.296565, 	-0.164817, 	-0.017358, 	-0.044499, 	-0.076260, 	-0.032832, 	-0.025176, 	0.247635, 	0.212685, 	-0.260910, 	-0.006960, 	-0.227685, 	-0.102874, 	0.133215, 	0.306572, 	0.028665, 	0.187531, 	-0.072067, 	0.126467, 	-0.066911, 	0.311705, 	-0.040739, 	0.292769, 	-0.074765, 	-0.107644, 	-0.047326, 	0.338134, 	-0.177915, 	0.067032, 	0.300114, 	0.021908, 	-0.196617, 	0.023531, 	0.028918, 	-0.033846, 	-0.165716, 	0.252935, 	0.035568, 	0.070507, 	0.058438, 	0.044333, 	0.154092, 	0.008749, 	0.293310, 	0.132865, 	-0.156306, 	0.271725, 	0.049764, 	-0.071524, 	0.049573, 	0.382720, 	-0.165830, 	0.082764, 	0.075526, 	-0.073316, 
		-0.159659, 	0.209606, 	0.053950, 	-0.198889, 	-0.208072, 	-0.180858, 	0.130830, 	0.051919, 	-0.231791, 	-0.206850, 	0.133087, 	-0.228906, 	-0.013862, 	0.008072, 	0.125046, 	0.097069, 	-0.133270, 	0.037801, 	-0.005589, 	-0.013751, 	0.170742, 	-0.107638, 	-0.056845, 	0.210823, 	0.098142, 	0.009288, 	0.042316, 	-0.263519, 	-0.210075, 	-0.265107, 	-0.338038, 	0.187577, 	0.097587, 	0.285155, 	0.180702, 	-0.117912, 	0.084100, 	-0.271330, 	-0.273316, 	-0.345441, 	0.223092, 	-0.055034, 	-0.065234, 	-0.109269, 	-0.272838, 	-0.038577, 	-0.046390, 	0.100356, 	-0.284761, 	-0.097462, 	0.062077, 	-0.288434, 	-0.285744, 	-0.236449, 	0.071357, 	-0.262260, 	0.167875, 	0.161241, 	0.168879, 	0.254331, 	0.139287, 	-0.123876, 	0.235557, 	-0.029884, 	-0.069391, 	-0.235706, 	0.045739, 	0.141827, 	0.116620, 	-0.191511, 	-0.190653, 	-0.210030, 	-0.349063, 	-0.325320, 	-0.050360, 	0.169365, 	0.173882, 	-0.158150, 	0.040922, 	0.103917, 	-0.269347, 	-0.327438, 	0.251425, 	-0.312173, 	0.299723, 	0.033136, 	-0.015657, 	-0.250998, 	0.170329, 	-0.101743, 	-0.240004, 	0.076207, 	-0.158467, 	-0.260292, 	-0.257396, 	-0.045203, 	-0.042788, 	-0.230712, 	-0.180359, 	-0.073132, 	0.010419, 	-0.039730, 	-0.372758, 	0.017294, 	0.048630, 	0.070357, 	-0.202389, 	-0.023950, 	-0.043104, 	-0.082438, 	-0.002254, 	-0.107631, 	-0.004249, 	-0.141520, 	-0.252620, 	-0.045470, 	-0.010889, 	0.033283, 	-0.062329, 	-0.225674, 	0.157278, 	0.188644, 	-0.013045, 	-0.369578, 	0.213106, 	-0.095378, 	-0.200403, 	0.031416
	};
//#pragma HLS ARRAY_PARTITION variable=bias type=complete
//#pragma HLS ARRAY_PARTITION variable=weights type=complete
	float dense_1_out[FC1_DENSE_SIZE] = {0};
	stream2arr(input, dense_1_out, FC1_DENSE_SIZE);
    float sum = 0;
    int in_offset = 0;
    int weight_offset = 0;
    int data_offset = 0;

	// Convolution layer
    ConvFilter_dense_2_1:
	for (int filter = 0; filter < FC2_1_DENSE_SIZE; filter++) {
//#pragma HLS UNROLL off=true
//#pragma HLS PIPELINE off=true
		ConvY:
		for (int i = 0; i < FC1_DENSE_SIZE ;i++) {
#pragma HLS PIPELINE off=false ii=10
//#pragma HLS UNROLL off=true
			weight_offset = filter * FC1_DENSE_SIZE + i;
//			output[filter] += input[i] * weights[weight_offset];
			sum += dense_1_out[i] * weights[weight_offset];

		}
//		output[filter] = sum + bias[filter];
//		sum = 0;
		output.write(sum + bias[filter]);
		sum=0;
	}
//	dense_2_1_out:
//	for(int i = 0 ; i < FC2_1_DENSE_SIZE; i++){
//		output[i] += bias[i];
//	}
	return;
	
}

void dense_2_2_accel(hls::stream<float>& input, hls::stream<float>& output){
//#pragma HLS INLINE off
//#pragma HLS DATAFLOW
	float bias[4] = {
		0.087111,
		0.105262,
		0.109013,
		0.100457,
	};
	float weights[512] = {
		0.050118, 	0.134696, 	-0.192387, 	0.114025, 	-0.007316, 	0.157690, 	-0.150928, 	0.071819, 	0.106201, 	0.087114, 	0.003023, 	-0.097592, 	-0.066953, 	-0.160498, 	0.028958, 	-0.118888, 	0.049619, 	0.166964, 	-0.134700, 	0.193292, 	-0.084299, 	0.190173, 	0.155716, 	0.107740, 	0.030213, 	-0.097013, 	-0.043229, 	0.162712, 	0.059424, 	0.028242, 	-0.036885, 	0.186475, 	-0.096320, 	0.016860, 	0.063573, 	-0.005751, 	0.172191, 	0.129569, 	0.081224, 	0.173210, 	0.122429, 	-0.108176, 	-0.024836, 	0.039875, 	-0.096276, 	-0.193443, 	0.142261, 	-0.143051, 	0.094148, 	-0.208871, 	0.115721, 	-0.043724, 	-0.122555, 	-0.126657, 	-0.154801, 	-0.082398, 	0.108388, 	-0.120766, 	0.086476, 	0.109771, 	0.015046, 	0.093431, 	0.041586, 	-0.144520, 	-0.071202, 	-0.038007, 	-0.012105, 	0.143290, 	0.042471, 	-0.177340, 	-0.103364, 	-0.150020, 	-0.072442, 	-0.179331, 	-0.046141, 	-0.207952, 	-0.074424, 	0.007620, 	-0.030237, 	-0.035759, 	0.080211, 	-0.204435, 	-0.181644, 	-0.087101, 	-0.025726, 	0.037312, 	0.134594, 	-0.085793, 	0.017314, 	0.062710, 	-0.183103, 	0.076326, 	0.013184, 	0.087691, 	0.091657, 	0.128854, 	0.160066, 	0.037790, 	-0.019178, 	0.169173, 	-0.093239, 	0.183308, 	-0.013172, 	0.025926, 	-0.074290, 	-0.053556, 	0.159523, 	0.000974, 	0.184796, 	-0.173216, 	-0.115595, 	0.108596, 	-0.109859, 	-0.067707, 	-0.148814, 	0.176636, 	0.091283, 	0.002271, 	0.053325, 	-0.037885, 	0.024838, 	-0.124052, 	0.115863, 	0.006030, 	-0.079899, 	-0.016726, 	-0.062323, 	-0.189838, 
		0.084846, 	-0.174018, 	-0.008769, 	0.133417, 	-0.202949, 	0.064531, 	-0.099403, 	-0.171382, 	-0.013191, 	-0.173250, 	0.045693, 	-0.049310, 	0.134283, 	-0.177186, 	-0.161911, 	0.079682, 	0.011078, 	0.082117, 	-0.182161, 	-0.060638, 	0.034199, 	-0.015828, 	-0.141626, 	-0.086242, 	-0.042791, 	-0.036469, 	0.015205, 	-0.139004, 	-0.193548, 	-0.055411, 	-0.115794, 	-0.114339, 	-0.044339, 	-0.132991, 	-0.093167, 	0.211204, 	-0.155576, 	0.004413, 	-0.105571, 	0.074724, 	-0.039058, 	0.106484, 	0.177452, 	-0.165975, 	-0.147657, 	-0.101347, 	0.042042, 	-0.153263, 	0.187330, 	-0.128552, 	0.145769, 	0.157014, 	0.147138, 	-0.108082, 	0.137225, 	-0.084729, 	-0.180514, 	0.041338, 	0.025855, 	0.126681, 	-0.100554, 	-0.043107, 	0.076801, 	0.139263, 	0.108945, 	-0.098562, 	0.121614, 	-0.069913, 	-0.136386, 	-0.112491, 	-0.042230, 	-0.167611, 	-0.042046, 	0.145781, 	0.046952, 	-0.167566, 	-0.059589, 	0.063230, 	-0.155840, 	0.207777, 	-0.006039, 	0.124560, 	-0.029381, 	0.009535, 	0.036986, 	-0.133329, 	-0.082858, 	0.088980, 	-0.006690, 	0.129218, 	-0.028800, 	0.142243, 	0.047566, 	-0.082657, 	-0.071144, 	-0.100114, 	-0.167327, 	0.125596, 	0.164187, 	-0.181231, 	0.160320, 	-0.197033, 	0.125752, 	-0.002988, 	-0.045424, 	0.204168, 	-0.145570, 	-0.143879, 	0.029845, 	-0.065674, 	-0.176024, 	0.083287, 	-0.080383, 	0.170514, 	-0.142417, 	0.094366, 	-0.086656, 	0.013977, 	-0.068589, 	0.031639, 	-0.031061, 	-0.020257, 	0.050288, 	-0.195365, 	-0.017403, 	0.183033, 	-0.199101, 	0.089873, 
		-0.085163, 	0.148756, 	0.181257, 	-0.059594, 	-0.134957, 	0.119871, 	0.105453, 	-0.008725, 	-0.099342, 	0.044858, 	0.093168, 	-0.001932, 	-0.126384, 	0.119048, 	-0.049749, 	-0.152701, 	0.104463, 	-0.170020, 	-0.028601, 	-0.094473, 	-0.029766, 	0.172437, 	0.142134, 	-0.041020, 	0.091799, 	-0.196171, 	0.051746, 	-0.149227, 	0.079641, 	-0.138593, 	-0.150717, 	0.192893, 	-0.156429, 	-0.001183, 	0.204160, 	0.173482, 	-0.125705, 	0.084897, 	0.142382, 	0.105460, 	0.089497, 	0.187527, 	-0.048482, 	0.098757, 	0.048273, 	0.126417, 	-0.144859, 	0.160940, 	0.090494, 	-0.082967, 	0.075625, 	-0.041971, 	-0.010885, 	-0.159268, 	-0.037968, 	0.139984, 	-0.148725, 	-0.165632, 	0.065023, 	-0.030824, 	-0.190224, 	-0.149970, 	-0.144201, 	0.065989, 	-0.198210, 	-0.179565, 	-0.010528, 	-0.039037, 	-0.004186, 	-0.133918, 	0.143628, 	0.060402, 	-0.090658, 	-0.096350, 	-0.120831, 	0.119867, 	-0.148688, 	0.013007, 	-0.150864, 	-0.155942, 	0.078120, 	-0.130994, 	0.009204, 	0.002728, 	-0.053173, 	-0.170617, 	0.130675, 	-0.102131, 	0.168663, 	0.213261, 	-0.119959, 	0.196933, 	0.180385, 	-0.165383, 	-0.122779, 	-0.027397, 	0.142631, 	-0.086806, 	0.085482, 	0.182627, 	0.053008, 	0.189590, 	-0.014670, 	0.114540, 	-0.053499, 	0.094377, 	0.103752, 	-0.176858, 	0.126420, 	0.208804, 	-0.044698, 	0.167139, 	-0.195409, 	-0.101899, 	-0.174939, 	-0.184149, 	0.111383, 	0.167188, 	-0.143838, 	-0.170607, 	-0.114432, 	-0.156478, 	-0.048490, 	-0.073313, 	0.069666, 	-0.019640, 	-0.072094, 	0.188150, 
		0.034879, 	-0.010805, 	0.189784, 	0.103222, 	-0.044497, 	0.088995, 	0.130624, 	-0.088105, 	0.131070, 	0.084513, 	0.095946, 	0.061229, 	-0.014641, 	-0.080537, 	0.172527, 	-0.059931, 	0.084705, 	0.087299, 	0.155038, 	-0.163971, 	0.094880, 	0.128254, 	0.153488, 	0.133767, 	-0.155238, 	-0.086460, 	-0.024088, 	0.108900, 	0.036898, 	0.107449, 	-0.192522, 	0.162416, 	0.177356, 	0.029067, 	-0.143792, 	0.178522, 	0.203407, 	0.007986, 	0.002282, 	0.059025, 	-0.003587, 	-0.073909, 	-0.079427, 	0.086352, 	-0.059988, 	0.143377, 	-0.093175, 	-0.179687, 	0.177487, 	0.074183, 	-0.184768, 	-0.049183, 	0.116364, 	-0.040821, 	0.199004, 	0.037644, 	-0.187749, 	0.179978, 	-0.160765, 	-0.173868, 	-0.077090, 	0.093467, 	-0.037947, 	-0.120620, 	0.038280, 	0.150980, 	0.067125, 	0.032291, 	-0.033437, 	-0.146985, 	0.186476, 	0.130478, 	-0.143630, 	-0.086473, 	0.163670, 	0.185998, 	0.040743, 	0.190992, 	0.166738, 	-0.117270, 	0.140438, 	-0.057067, 	0.047684, 	0.142155, 	-0.112221, 	0.089102, 	0.163205, 	-0.021428, 	0.078471, 	0.012086, 	0.037347, 	0.082493, 	-0.078160, 	0.144485, 	0.169679, 	0.110141, 	0.083425, 	-0.012505, 	-0.181926, 	-0.102715, 	-0.041846, 	-0.060988, 	-0.027679, 	-0.162573, 	-0.196125, 	-0.017106, 	0.181690, 	0.133749, 	-0.185955, 	-0.181353, 	0.158460, 	0.047392, 	-0.156407, 	0.045487, 	0.014658, 	0.058619, 	-0.044101, 	-0.104133, 	-0.089855, 	-0.195007, 	0.130264, 	-0.192776, 	0.085985, 	-0.049749, 	0.190108, 	-0.128967, 	0.155957, 	0.119741
	};
#pragma HLS ARRAY_PARTITION variable=bias type=complete
#pragma HLS ARRAY_PARTITION variable=weights type=complete
	float dense_1_out[FC1_DENSE_SIZE] = {0};
	stream2arr(input, dense_1_out, FC1_DENSE_SIZE);
	float sum = 0;
    int in_offset = 0;
    int weight_offset = 0;
    int data_offset = 0;

	// Convolution layer
    ConvFilter_dense_2_2:
	for (int filter = 0; filter < FC2_2_DENSE_SIZE; filter++) {
//#pragma HLS UNROLL off=true
//#pragma HLS PIPELINE off=true
		ConvY:
		for (int i = 0; i < FC1_DENSE_SIZE ;i++) {
#pragma HLS PIPELINE off=false ii=10
#pragma HLS UNROLL off=true
			weight_offset = filter * FC1_DENSE_SIZE + i;
//			output[filter] += input[i] * weights[weight_offset];
			sum += dense_1_out[i] * weights[weight_offset];

		}
//		output[filter] = sum + bias[filter];
		output.write(sum + bias[filter]);
		sum = 0;
	}
//	dense_2_2_out:
//	for(int i = 0 ; i < FC2_2_DENSE_SIZE; i++){
//		output[i] += bias[i];
//	}
	return;
	
}

void rnet_accel(float* input, float* dense_1_weight, float* output1, float* output2){
#pragma HLS INTERFACE m_axi port=input offset=slave bundle=gmem0 depth=INPUT_SIZE * INPUT_SIZE * CONV1_IN_CHANNEL
//#pragma HLS INTERFACE m_axi port=conv_mp_2_weights bundle=gmem1 depth=CONV2_SIZE * CONV2_SIZE * CONV2_FILTER * CONV2_IN_CHANNEL
//#pragma HLS INTERFACE m_axi port=conv_3_weights bundle=gmem2 depth=CONV3_SIZE * CONV3_SIZE * CONV3_FILTER * CONV3_IN_CHANNEL
#pragma HLS INTERFACE m_axi port=dense_1_weight bundle=gmem1 depth=FC1_DENSE_SIZE * CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER
#pragma HLS INTERFACE m_axi port=output1 offset=slave bundle=gmem2 depth = FC2_1_DENSE_SIZE
#pragma HLS INTERFACE m_axi port=output2 offset=slave bundle=gmem3 depth = FC2_2_DENSE_SIZE
#pragma HLS INTERFACE s_axilite port=return
//#pragma HLS DATAFLOW disable_start_propagation
#pragma HLS DATAFLOW
//	float input_local[INPUT_SIZE * INPUT_SIZE * CONV1_IN_CHANNEL] = {0};
//	float out1[POOL1_OUT_SIZE * POOL1_OUT_SIZE * CONV1_FILTER] = {0};
//	float out2[POOL2_OUT_SIZE * POOL2_OUT_SIZE * CONV2_FILTER] = {0};
//	float out3[CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER] = {0};
//	float flatten_out[CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER] = {0};
//	float out4[FC1_DENSE_SIZE] = {0};
//	float out5_1[FC2_1_DENSE_SIZE] = {0};
//	float out5_2[FC2_2_DENSE_SIZE] = {0};
//#pragma HLS BIND_STORAGE variable=out1 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out2 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out3 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out4 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=flatten_out type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=input_local type=ram_s2p impl=lutram


	hls::stream<float> inStream;
	hls::stream<float> out1;
	hls::stream<float> out2;
	hls::stream<float> out3;
	hls::stream<float> out4;
	hls::stream<float> out5;
	hls::stream<float> out_seb;
	hls::stream<float> out6;
	hls::stream<float> out7;
	float dense_1_outarr[FC1_DENSE_SIZE];
	float dense_1_outarr_1[FC1_DENSE_SIZE];
	float dense_1_outarr_2[FC1_DENSE_SIZE];
	hls::stream<float> out7_1;
	hls::stream<float> out7_2;
	hls::stream<float> out8;
	hls::stream<float> out9;
//#pragma HLS stream variable=inStream depth=INPUT_SIZE * INPUT_SIZE * CONV1_IN_CHANNEL type=pipo
//#pragma HLS stream variable=out1 depth=CONV1_OUT_SIZE * CONV1_OUT_SIZE * CONV1_FILTER type=pipo
//#pragma HLS stream variable=out2 depth=POOL1_OUT_SIZE * POOL1_OUT_SIZE * CONV1_FILTER type=pipo
//#pragma HLS stream variable=out3 depth=CONV2_OUT_SIZE * CONV2_OUT_SIZE * CONV2_FILTER type=pipo
//#pragma HLS stream variable=out4 depth=POOL2_OUT_SIZE * POOL2_OUT_SIZE * CONV2_FILTER type=pipo
//#pragma HLS stream variable=out5 depth=CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER type=pipo
//#pragma HLS stream variable=out6 depth=CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER type=pipo
//#pragma HLS stream variable=out7 depth=FC1_DENSE_SIZE type=pipo
//#pragma HLS stream variable=out7_1 depth=FC1_DENSE_SIZE type=pipo
//#pragma HLS stream variable=out7_2 depth=FC1_DENSE_SIZE type=pipo
//#pragma HLS stream variable=out8 depth=FC2_1_DENSE_SIZE type=pipo
//#pragma HLS stream variable=out9 depth=FC2_2_DENSE_SIZE type=pipo

//#pragma HLS BIND_STORAGE variable=out1 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out2 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out3 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out4 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out5 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out6 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out7 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out7_1 type=ram_s2p impl=lutram
//#pragma HLS BIND_STORAGE variable=out7_2 type=ram_s2p impl=lutram


	arr2stream(input, inStream, INPUT_SIZE * INPUT_SIZE * CONV1_IN_CHANNEL);
	conv_1_accel(inStream, out1);
	mp_1_accel(out1, out2);
//	printMat(out2, CONV1_FILTER, POOL1_OUT_SIZE);

	conv_2_accel(out2, out3);
	mp_2_accel(out3, out4);
	//  printMat(out4, CONV2_FILTER, POOL2_OUT_SIZE);


	conv_3_accel(out4, out5);
//	printMat(out5, CONV3_FILTER, CONV3_OUT_SIZE);

	SEBlock(out5, out_seb);
//	printMat(out_seb, CONV3_FILTER, CONV3_OUT_SIZE);

	flatten_accel(out_seb, out6);
//	printMat(out6, CONV3_FILTER, CONV3_OUT_SIZE);

	dense_1_accel(out6, dense_1_weight, out7);


	stream2arr(out7, dense_1_outarr, FC1_DENSE_SIZE);

	duplicateArray(dense_1_outarr, dense_1_outarr_1, dense_1_outarr_2, FC1_DENSE_SIZE);

	arr2stream(dense_1_outarr_1, out7_1, FC1_DENSE_SIZE);
	arr2stream(dense_1_outarr_2, out7_2, FC1_DENSE_SIZE);

	dense_2_1_accel(out7_1, out8);
	dense_2_2_accel(out7_2, out9);

	stream2arr(out8, output1, FC2_1_DENSE_SIZE);
	stream2arr(out9, output2, FC2_2_DENSE_SIZE);

};
