#include "config/rnet_config.h"
float prelu(float input, float alpha){
    return (input >= 0) ? input : alpha * input;
}
void conv_mp_1_accel(float* input, /*float* weights,*/ float* output){
//#pragma HLS INLINE off
	float weights[756] = {
		-0.503155, 0.018870, 0.380679, -0.408885, 0.050604, 0.386021, -0.292327, 0.135541, 0.307952, -0.399094, -0.052070, 0.238901, -0.296609, -0.021749, 0.264421, -0.184039, 0.053204, 0.171454, -0.303838, -0.025410, 0.217041, -0.201373, 0.004925, 0.255387, -0.100624, 0.099434, 0.170644, -0.058877, 0.407334, 0.450523, -0.412473, -0.473062, 0.316567, 0.181692, -0.328637, -0.127831, -0.152054, 0.225482, 0.131528, -0.232748, -0.407925, 0.158768, 0.411675, -0.109532, -0.067433, -0.107350, 0.205213, 0.016933, -0.117357, -0.377186, 0.032215, 0.522623, -0.056739, -0.163342, -0.359088, -0.434058, -0.355726, -0.060508, -0.030373, -0.008123, 0.276551, 0.400605, 0.247442, -0.292599, -0.306171, -0.233960, 0.000580, 0.085695, 0.064102, 0.249588, 0.391371, 0.207436, -0.251361, -0.259492, -0.168984, -0.011043, 0.073090, 0.066820, 0.177776, 0.318290, 0.164422, 0.381227, -0.320106, 0.035897, 0.159765, -0.641442, 0.296535, -0.043092, -0.106543, 0.232304, 0.342855, -0.334864, -0.011292, 0.180365, -0.569639, 0.288282, 0.005635, -0.072418, 0.177403, 0.296654, -0.299136, -0.005436, 0.123114, -0.512951, 0.316828, -0.051202, -0.048345, 0.201471, -0.043877, -0.069286, -0.139641, -0.071801, 0.033479, -0.069586, -0.026132, -0.058977, -0.042617, 0.294440, 0.274232, 0.253627, 0.224350, 0.304534, 0.252983, 0.265990, 0.221569, 0.275692, -0.183271, -0.215189, -0.140566, -0.249719, -0.203223, -0.189143, -0.172582, -0.243485, -0.169363, -0.085715, -0.179980, -0.091498, 0.409237, 0.480360, 0.290331, -0.294183, -0.341874, -0.162895, -0.150512, -0.253072, -0.136617, 0.375790, 0.453824, 0.285134, -0.259971, -0.285538, -0.101950, -0.108773, -0.196966, -0.144721, 0.357479, 0.446844, 0.239149, -0.205911, -0.228641, -0.120088, 0.105347, -0.143407, -0.475683, 0.225112, 0.070025, -0.007710, 0.370865, 0.235418, 0.159350, -0.043131, -0.004180, -0.077186, -0.098927, -0.074126, 0.069291, -0.078075, -0.086952, -0.001805, 0.008595, 0.148699, 0.136697, -0.114113, -0.028704, 0.156107, -0.173618, -0.171572, -0.050676, -0.262339, 0.141596, 0.418572, -0.389285, -0.004176, 0.215179, -0.362289, -0.125136, 0.080721, -0.226369, 0.187216, 0.421923, -0.311432, 0.082322, 0.237289, -0.310010, -0.061489, 0.080860, -0.142052, 0.196438, 0.330358, -0.226970, 0.095428, 0.148182, -0.248088, -0.064611, 0.003831, 0.257921, 0.330577, -0.045755, 0.365183, 0.032145, -0.318915, 0.045474, -0.317396, -0.263670, 0.232670, 0.247261, -0.171630, 0.365700, -0.025122, -0.382374, 0.097734, -0.285631, -0.192690, 0.259811, 0.292221, -0.105448, 0.296484, -0.034283, -0.312484, -0.049342, -0.312418, -0.100677, -0.316763, -0.284389, -0.345788, -0.219428, -0.327510, -0.385804, -0.332283, -0.349742, -0.318093, 0.218507, 0.282566, 0.241553, 0.234075, 0.149223, 0.118728, 0.176874, 0.190000, 0.238862, 0.045035, 0.169884, 0.162895, 0.101954, 0.083297, 0.079301, 0.091209, 0.155776, 0.236106, 0.120393, 0.283260, 0.205927, -0.290354, 0.073402, 0.282593, -0.275328, -0.281817, -0.064031, 0.050958, 0.291946, 0.208383, -0.366262, 0.072789, 0.306807, -0.333546, -0.288392, -0.025846, 0.099634, 0.308582, 0.203265, -0.289474, 0.091824, 0.260107, -0.234629, -0.281998, -0.121607, -0.178891, -0.331193, -0.081520, -0.023203, -0.165171, -0.030759, -0.194368, -0.219898, -0.124041, 0.380377, 0.188832, 0.359944, 0.391537, 0.219832, 0.281242, 0.217218, 0.164888, 0.184257, -0.020198, -0.194864, -0.039553, 0.017987, -0.143835, -0.105868, -0.087586, -0.145387, -0.156821, 0.032066, 0.105945, 0.060265, 0.162985, 0.235715, 0.182688, 0.211006, 0.258132, 0.203235, -0.175267, -0.192513, -0.223372, -0.353363, -0.385530, -0.361538, -0.311779, -0.378313, -0.298677, 0.167007, 0.167686, 0.164718, 0.102202, 0.099716, 0.121313, 0.089381, 0.051274, 0.094272, 0.054851, 0.065630, 0.039748, 0.037097, 0.032690, -0.006535, -0.027975, -0.036154, -0.098698, 0.143436, 0.169386, 0.108673, 0.124167, 0.134324, 0.069722, 0.018258, 0.023932, -0.058519, 0.145680, 0.182933, 0.111915, 0.124124, 0.148125, 0.071442, 0.010755, 0.025156, -0.064074, 0.238104, 0.363353, 0.167092, -0.299479, -0.620547, -0.392301, 0.072116, 0.284869, 0.222457, 0.208610, 0.338233, 0.143444, -0.298527, -0.649439, -0.399864, 0.077360, 0.269843, 0.239362, 0.136757, 0.290243, 0.075467, -0.220487, -0.496317, -0.321663, 0.068774, 0.301045, 0.234384, -0.449427, -0.036097, 0.262315, -0.194946, 0.203263, 0.042949, 0.081392, 0.000115, -0.159795, -0.191554, 0.077479, 0.188221, 0.053519, 0.295196, 0.001923, 0.280871, 0.092419, -0.148550, -0.231934, -0.038077, 0.051989, -0.021274, 0.167043, -0.121518, 0.179146, -0.032100, -0.249956, -0.015181, -0.424904, -0.337638, 0.323517, -0.029346, -0.315076, 0.375965, 0.334202, 0.106919, -0.048973, -0.382073, -0.119174, 0.252057, -0.077803, -0.247900, 0.214584, 0.189892, 0.031255, -0.061771, -0.333061, -0.077483, 0.280900, -0.045515, -0.226181, 0.277154, 0.208881, -0.002667, -0.638562, -0.465556, -0.258547, -0.122972, 0.054879, 0.107006, 0.419537, 0.471521, 0.447977, -0.336342, -0.272739, -0.149545, -0.081006, 0.031915, 0.081923, 0.196722, 0.235980, 0.232144, -0.226205, -0.188906, -0.153889, -0.045143, 0.069481, 0.075374, 0.151552, 0.200884, 0.202760, -0.175464, -0.228898, -0.276655, -0.123704, -0.138998, -0.078021, -0.136641, -0.228295, -0.114481, 0.056565, 0.040589, -0.007768, 0.084012, 0.099080, 0.160873, 0.063936, 0.005829, 0.116613, 0.122660, 0.146285, 0.083142, 0.129551, 0.168364, 0.212208, 0.085651, 0.042195, 0.129655, 0.557904, 0.551593, 0.454058, 0.083302, -0.036917, -0.160281, -0.374032, -0.496653, -0.473966, -0.227484, -0.250328, -0.196495, -0.039573, -0.012398, -0.017944, 0.191284, 0.203280, 0.230356, -0.321756, -0.302556, -0.217864, -0.054508, 0.063015, 0.081189, 0.176017, 0.268576, 0.300545, 0.347486, 0.387426, 0.364716, 0.102492, 0.035788, -0.124378, -0.275942, -0.390569, -0.374909, 0.225767, 0.271853, 0.270469, 0.071168, 0.035721, -0.119921, -0.211046, -0.300484, -0.289444, 0.188213, 0.234355, 0.212659, 0.030258, 0.010188, -0.129652, -0.171497, -0.220487, -0.210222, 0.402539, 0.097377, -0.495887, 0.326867, -0.022389, -0.344147, 0.321368, 0.034333, -0.268918, 0.238533, 0.022356, -0.332711, 0.198272, -0.059670, -0.142780, 0.174036, -0.004112, -0.099700, 0.144707, 0.006630, -0.235418, 0.114733, -0.066090, -0.047412, 0.127367, 0.005498, -0.010821, -0.315166, 0.570189, -0.205486, -0.201027, 0.494829, -0.305215, -0.055346, 0.183704, -0.105420, -0.315929, 0.495951, -0.208650, -0.197144, 0.428142, -0.237133, -0.079436, 0.099262, -0.069824, -0.324338, 0.430139, -0.188594, -0.189604, 0.373661, -0.202045, -0.049453, 0.094743, -0.001569, 0.148909, 0.120849, -0.485369, -0.077285, 0.473755, -0.031601, -0.237831, 0.042259, 0.107987, 0.118607, 0.163614, -0.351408, -0.120503, 0.469243, 0.047549, -0.279660, -0.007677, 0.101570, 0.083010, 0.119189, -0.327724, -0.120471, 0.418266, 0.028930, -0.232829, -0.031353, 0.044707, 0.052409, -0.263851, -0.175961, -0.178628, 0.187035, 0.442793, 0.113521, 0.096633, -0.280201, 0.117481, -0.223306, -0.150788, -0.167388, 0.202964, 0.480429, 0.066224, 0.009583, -0.366559, 0.109908, -0.189855, -0.145070, -0.175219, 0.195123, 0.462687, 0.011917, 0.006273, -0.322328, 0.325124, -0.130129, -0.249412, 0.267659, -0.031984, -0.248817, 0.278544, 0.008950, -0.319927, 0.321874, -0.114536, -0.248589, 0.266871, 0.003513, -0.214626, 0.281744, 0.039685, -0.264051, 0.261958, -0.108649, -0.169608, 0.180293, -0.007306, -0.152165, 0.183860, 0.026889, -0.213800, -0.052442, -0.083536, 0.077920, -0.058926, -0.150776, 0.002504, -0.024163, -0.154261, -0.068585, -0.135393, -0.159594, 0.008309, -0.119617, -0.191271, -0.026926, -0.079533, -0.186910, -0.074353, -0.053474, -0.073947, 0.062479, 0.014905, -0.045511, 0.079511, 0.066475, -0.019194, 0.060301, 0.363276, 0.239748, -0.081334, 0.247280, -0.040414, -0.423901, 0.048539, -0.232925, -0.387736, 0.327758, 0.260632, -0.045826, 0.248230, 0.041644, -0.324222, 0.039583, -0.157392, -0.303182, 0.221166, 0.237938, 0.016366, 0.183999, 0.062100, -0.242357, 0.005383, -0.137796, -0.257103
	};
    static float bias[28] = {
		-0.353076,
		0.056813,
		-0.370002,
		0.010823,
		0.076645,
		-0.006551,
		-0.031522,
		-0.244183,
		0.000696,
		0.491104,
		0.009182,
		0.412668,
		-0.314887,
		-0.080503,
		0.027028,
		0.107537,
		-0.427299,
		0.106730,
		0.418310,
		0.073638,
		-0.000501,
		0.138367,
		0.018392,
		0.129464,
		0.004855,
		-0.068913,
		-0.567298,
		-0.292548
	};

	static float prelu_weight[28] = {
		1.295730,
		0.090654,
		-0.126670,
		0.024778,
		-0.294292,
		0.064689,
		0.010410,
		-0.192725,
		0.429888,
		0.827590,
		0.128191,
		-0.158204,
		0.000146,
		0.096177,
		0.102529,
		0.139807,
		1.262594,
		-0.199365,
		-0.357304,
		-0.399969,
		0.188318,
		0.100277,
		0.069785,
		0.076378,
		0.045405,
		-0.651187,
		0.074833,
		-0.089441
	};
#pragma HLS ARRAY_PARTITION variable=bias type=complete
#pragma HLS ARRAY_PARTITION variable=prelu_weight type=complete

    float out_conv[CONV1_OUT_SIZE * CONV1_OUT_SIZE * CONV1_FILTER] = {0};
//#pragma HLS ARRAY_RESHAPE variable=out_conv type=cycle dim=1 factor=CONV1_OUT_SIZE * CONV1_OUT_SIZE
    int in_offset = 0;
    int weight_offset = 0;
    int data_offset = 0;

	// Convolution layer
    ConvFilter:
	for (int filter = 0; filter < CONV1_FILTER; filter++) {
#pragma HLS UNROLL off=true
#pragma HLS PIPELINE off=true
		ConvY:
		for (int ify = 0; ify < CONV1_OUT_SIZE; ify++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			ConvX:
			for (int ifx = 0; ifx < CONV1_OUT_SIZE; ifx++){
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
				ConvChannel:
				for (int inChan = 0; inChan < CONV1_IN_CHANNEL; inChan++) {
#pragma HLS UNROLL off=true
#pragma HLS PIPELINE off=false ii=46
					ConvKy:
					for (int ky = 0; ky < CONV1_SIZE; ky++) {
#pragma HLS UNROLL off=false
#pragma HLS PIPELINE off=true
//#pragma HLS PIPELINE off=true
						ConvKx:
						for (int kx = 0; kx < CONV1_SIZE; kx++) {
#pragma HLS UNROLL off=false
#pragma HLS PIPELINE off=true
							data_offset = CONV1_OUT_SIZE * CONV1_OUT_SIZE * filter + ify * CONV1_OUT_SIZE + ifx;
							in_offset = inChan * INPUT_SIZE * INPUT_SIZE + INPUT_SIZE * (ify + ky) + (ifx + kx);
							weight_offset = CONV1_SIZE * CONV1_SIZE * inChan + CONV1_IN_CHANNEL * CONV1_SIZE * CONV1_SIZE * filter + CONV1_SIZE * ky + kx;
							out_conv[data_offset] += input[in_offset] * weights[weight_offset];
						}
					}
				}
			}
		}
	}

	for(int i = 0; i < CONV1_FILTER; i++){
		for(int j = 0; j < CONV1_OUT_SIZE * CONV1_OUT_SIZE; j++){
			int offset = i * CONV1_OUT_SIZE * CONV1_OUT_SIZE + j;
			out_conv[offset] = prelu(out_conv[offset] + bias[i], prelu_weight[i]);
		}
	}

	//Max pooling layer
	Pool_y:
	for (int ify = 0; ify < POOL1_OUT_SIZE; ify++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
		Pool_x:
		for (int ifx = 0; ifx < POOL1_OUT_SIZE; ifx++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			//float max = FLOAT_MIN;
			Pool_channel:
			for (int inChan = 0; inChan < CONV1_FILTER; inChan++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
				int data_offset = inChan * POOL1_OUT_SIZE * POOL1_OUT_SIZE + ify * POOL1_OUT_SIZE + ifx;
				int out_conv_offset = inChan * CONV1_OUT_SIZE * CONV1_OUT_SIZE + ify * STRIDE1 * CONV1_OUT_SIZE + ifx * STRIDE1;
				float max = out_conv[out_conv_offset];
				Ky:
				for (int ky = 0; ky < MP1_SIZE; ky++) {
#pragma HLS PIPELINE off=false ii=8
#pragma HLS UNROLL off=true
					Kx:
					for (int kx = 0; kx < MP1_SIZE; kx++) {
#pragma HLS UNROLL off=false
#pragma HLS PIPELINE off=true
						in_offset = out_conv_offset + ky * CONV1_OUT_SIZE + kx;
						if( ((CONV1_OUT_SIZE - ifx * STRIDE1) >= MP1_SIZE) && ((CONV1_OUT_SIZE - ify * STRIDE1) >= MP1_SIZE)){
							max = (out_conv[in_offset] > max) ? out_conv[in_offset] : max;
						} else {
							if(kx >= (CONV1_OUT_SIZE - ifx * STRIDE1)){
								in_offset = in_offset - 1;
							}
							if(ky >= (CONV1_OUT_SIZE - ify * STRIDE1)){
								in_offset = in_offset - CONV1_OUT_SIZE;
							}
							max = (out_conv[in_offset] > max) ? out_conv[in_offset] : max;
						}
					}
				}
				output[data_offset] = max;
			}
		}
	}
	return;
}

void conv_mp_2_accel(float* input, float* weights, float* output){
//#pragma HLS INLINE off
    static float bias[48] = {
		0.094029,
		0.327289,
		0.172584,
		0.029086,
		0.282626,
		0.081659,
		0.101490,
		0.018634,
		-0.074959,
		0.083880,
		-0.078001,
		-0.019045,
		-0.193995,
		0.113976,
		0.159902,
		-0.107466,
		0.141979,
		0.280887,
		0.210457,
		0.115587,
		0.204137,
		-0.006217,
		0.078271,
		0.084244,
		0.117565,
		0.136267,
		0.065752,
		-0.009469,
		0.210868,
		-0.325333,
		0.149824,
		-0.062070,
		-0.140055,
		0.168983,
		0.146847,
		0.148736,
		0.137864,
		0.224248,
		-0.134405,
		0.169784,
		0.329247,
		0.028207,
		0.128052,
		-0.042469,
		0.102474,
		-0.116870,
		-0.131876,
		-0.184021
	};

	static float prelu_weight[48] = {
		0.186704,
		0.186436,
		0.198175,
		0.336665,
		0.183941,
		0.236436,
		0.122992,
		0.053974,
		0.087718,
		0.140263,
		0.164887,
		0.125173,
		0.188745,
		0.212781,
		0.276836,
		-0.043570,
		0.327054,
		0.413039,
		0.113779,
		0.287904,
		0.349545,
		0.122340,
		0.411044,
		-0.063324,
		0.308258,
		0.202876,
		0.181728,
		0.134618,
		0.340748,
		0.000012,
		0.218724,
		0.125220,
		0.328856,
		0.276002,
		0.347897,
		0.084337,
		0.326784,
		0.170295,
		0.628715,
		0.119328,
		0.237030,
		0.105378,
		0.259698,
		0.089609,
		0.347111,
		0.386249,
		0.000033,
		-0.164726
	};
#pragma HLS ARRAY_PARTITION variable=bias type=complete
#pragma HLS ARRAY_PARTITION variable=prelu_weight type=complete

    float out_conv[CONV2_OUT_SIZE * CONV2_OUT_SIZE * CONV2_FILTER] = {0};
    int in_offset = 0;
    int weight_offset = 0;
    int data_offset = 0;

	// Convolution layer
    ConvFilter:
	for (int filter = 0; filter < CONV2_FILTER; filter++) {
#pragma HLS UNROLL off=true
#pragma HLS PIPELINE off=true
		ConvY:
		for (int ify = 0; ify < CONV2_OUT_SIZE; ify++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			ConvX:
			for (int ifx = 0; ifx < CONV2_OUT_SIZE; ifx++){
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
				ConvChannel:
				for (int inChan = 0; inChan < CONV1_FILTER; inChan++) {
#pragma HLS UNROLL off=true
#pragma HLS PIPELINE off=true
					ConvKy:
					for (int ky = 0; ky < CONV2_SIZE; ky++) {
#pragma HLS UNROLL off=true
#pragma HLS PIPELINE off=false ii=16
//#pragma HLS PIPELINE off=true
						ConvKx:
						for (int kx = 0; kx < CONV2_SIZE; kx++) {
#pragma HLS UNROLL off=false
#pragma HLS PIPELINE off=true
							data_offset = CONV2_OUT_SIZE * CONV2_OUT_SIZE * filter + ify * CONV2_OUT_SIZE + ifx;
							in_offset = inChan * POOL1_OUT_SIZE * POOL1_OUT_SIZE + POOL1_OUT_SIZE * (ify + ky) + (ifx + kx);
							weight_offset = CONV2_SIZE * CONV2_SIZE * inChan + CONV1_FILTER * CONV2_SIZE * CONV2_SIZE * filter + CONV2_SIZE * ky + kx;
//							sum = sum + input[in_offset] * weights[weight_offset];
//							data_offset = CONV2_OUT_SIZE * CONV2_OUT_SIZE * filter + ify * CONV2_OUT_SIZE + ifx;
//							out_conv[data_offset] = prelu(sum + bias[filter], prelu_weight[filter]);
							out_conv[data_offset] += input[in_offset] * weights[weight_offset];
						}
					}
				}
//				data_offset = CONV2_OUT_SIZE * CONV2_OUT_SIZE * filter + ify * CONV2_OUT_SIZE + ifx;
//				out_conv[data_offset] = prelu(sum + bias[filter], prelu_weight[filter]);
//				sum = 0;
			}
		}
	}
	for(int i = 0 ; i < CONV2_FILTER; i++){
		for(int j = 0 ; j < CONV2_OUT_SIZE * CONV2_OUT_SIZE; j++){
			int offset = i * CONV2_OUT_SIZE * CONV2_OUT_SIZE + j;
			out_conv[offset] = prelu(out_conv[offset] + bias[i], prelu_weight[i]);
		}
	}
	//Max pooling layer
	Pool_y:
	for (int ify = 0; ify < POOL2_OUT_SIZE; ify++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
		Pool_x:
		for (int ifx = 0; ifx < POOL2_OUT_SIZE; ifx++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			//float max = FLOAT_MIN;
			Pool_channel:
			for (int inChan = 0; inChan < CONV2_FILTER; inChan++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
				int data_offset = inChan * POOL2_OUT_SIZE * POOL2_OUT_SIZE + ify * POOL2_OUT_SIZE + ifx;
				int out_conv_offset = inChan * CONV2_OUT_SIZE * CONV2_OUT_SIZE + ify * STRIDE2 * CONV2_OUT_SIZE + ifx * STRIDE2;
				float max = out_conv[out_conv_offset];
				Ky:
				for (int ky = 0; ky < MP2_SIZE; ky++) {
#pragma HLS PIPELINE off=false ii=6
#pragma HLS UNROLL off=true
					Kx:
					for (int kx = 0; kx < MP2_SIZE; kx++) {
#pragma HLS UNROLL off=false
#pragma HLS PIPELINE off=true
						in_offset = out_conv_offset + ky * CONV2_OUT_SIZE + kx;
						if( ((CONV2_OUT_SIZE - ifx * STRIDE2) >= MP2_SIZE) && ((CONV2_OUT_SIZE - ify * STRIDE2) >= MP2_SIZE)){
							max = (out_conv[in_offset] > max) ? out_conv[in_offset] : max;
						} else {
							if(kx >= (CONV2_OUT_SIZE - ifx * STRIDE2)){
								in_offset = in_offset - 1;
							}
							if(ky >= (CONV2_OUT_SIZE - ify * STRIDE2)){
								in_offset = in_offset - CONV2_OUT_SIZE;
							}
							max = (out_conv[in_offset] > max) ? out_conv[in_offset] : max;
						}
					}
				}
				output[data_offset] = max;
			}
		}
	}
	return;
}

void conv_3_accel(float* input, float* weights, float* output){
//#pragma HLS INLINE off
//#pragma HLS DATAFLOW
	static float bias[64] = {
		-0.044563,
		0.050892,
		0.037044,
		0.022290,
		0.021149,
		0.074119,
		0.045967,
		0.179766,
		0.118839,
		0.251707,
		0.047156,
		0.322978,
		-0.136098,
		0.123757,
		0.029065,
		0.087611,
		0.134965,
		0.120632,
		-0.043939,
		0.246146,
		0.178716,
		0.000986,
		0.098664,
		0.207931,
		0.055692,
		0.140794,
		-0.008910,
		0.243812,
		0.052779,
		-0.061529,
		0.237085,
		0.130137,
		-0.127091,
		0.151699,
		0.021105,
		-0.032341,
		0.080958,
		0.075677,
		0.178633,
		0.306293,
		0.052025,
		0.079978,
		0.015238,
		0.136050,
		0.115799,
		0.070656,
		0.215984,
		0.052217,
		0.090320,
		0.307756,
		0.253185,
		-0.036462,
		0.264750,
		0.102011,
		0.125488,
		0.216461,
		0.181531,
		0.163024,
		0.065894,
		0.134277,
		0.027758,
		-0.011225,
		0.003010,
		0.135207
	};

	static float prelu_weight[64] = {
		-0.056569,
		0.006064,
		-0.017105,
		-0.114015,
		-0.173701,
		0.021751,
		-0.083089,
		-0.132606,
		-0.040621,
		-0.065564,
		-0.165575,
		-0.561481,
		-0.272510,
		0.099228,
		-0.099825,
		-0.021730,
		-0.076627,
		-0.132540,
		-0.178797,
		0.028707,
		-0.192815,
		0.008373,
		0.181069,
		-0.025643,
		-0.061117,
		0.060178,
		-0.336845,
		-0.242792,
		-0.439314,
		-0.289200,
		-0.248033,
		-0.135894,
		-0.060672,
		0.129494,
		-0.164857,
		-0.171547,
		-0.007087,
		0.019842,
		0.107082,
		0.041563,
		-0.151887,
		-0.045383,
		-0.062217,
		-0.008302,
		-0.257369,
		-0.283460,
		-0.146823,
		-0.201807,
		0.096587,
		0.115740,
		-0.146873,
		-0.309228,
		-0.084329,
		0.049165,
		-0.008819,
		-0.319011,
		-0.152335,
		-0.085487,
		-0.002878,
		0.033648,
		-0.220722,
		-0.127729,
		-0.226109,
		-0.339814
	};
#pragma HLS ARRAY_PARTITION variable=bias type=complete
#pragma HLS ARRAY_PARTITION variable=prelu_weight type=complete

    int in_offset = 0;
    int weight_offset = 0;
    int data_offset = 0;

	// Convolution layer
    ConvFilter:
	for (int filter = 0; filter < CONV3_FILTER; filter++) {
#pragma HLS UNROLL off=true
#pragma HLS PIPELINE off=true
		ConvY:
		for (int ify = 0; ify < CONV3_OUT_SIZE; ify++) {
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
			ConvX:
			for (int ifx = 0; ifx < CONV3_OUT_SIZE; ifx++){
#pragma HLS PIPELINE off=true
#pragma HLS UNROLL off=true
				ConvChannel:
				for (int inChan = 0; inChan < CONV3_IN_CHANNEL; inChan++) {
#pragma HLS UNROLL off=true
#pragma HLS PIPELINE off=true
					ConvKy:
					for (int ky = 0; ky < CONV3_SIZE; ky++) {
#pragma HLS UNROLL off=true
#pragma HLS PIPELINE off=false ii=11
//#pragma HLS PIPELINE off=true
						ConvKx:
						for (int kx = 0; kx < CONV3_SIZE; kx++) {
#pragma HLS UNROLL off=false
#pragma HLS PIPELINE off=true
							data_offset = CONV3_OUT_SIZE * CONV3_OUT_SIZE * filter + ify * CONV3_OUT_SIZE + ifx;
							in_offset = inChan * POOL2_OUT_SIZE * POOL2_OUT_SIZE + POOL2_OUT_SIZE * (ify + ky) + (ifx + kx);
							weight_offset = CONV3_SIZE * CONV3_SIZE * inChan + CONV3_IN_CHANNEL * CONV3_SIZE * CONV3_SIZE * filter + CONV3_SIZE * ky + kx;
//							sum = sum + input[in_offset] * weights[weight_offset];
//							data_offset = CONV3_OUT_SIZE * CONV3_OUT_SIZE * filter + ify * CONV3_OUT_SIZE + ifx;
//							output[data_offset] = prelu(sum + bias[filter], prelu_weight[filter]);
//							sum = ((inChan + 1) == CONV3_IN_CHANNEL && (ky + 1) == CONV3_SIZE && (kx + 1) == CONV3_SIZE) ? 0 : sum;
							output[data_offset] += input[in_offset] * weights[weight_offset];
						}
					}
				}
//				data_offset = CONV3_OUT_SIZE * CONV3_OUT_SIZE * filter + ify * CONV3_OUT_SIZE + ifx;
//				output[data_offset] = prelu(sum + bias[filter], prelu_weight[filter]);
//				sum = 0;
			}
		}
	}

	for(int i = 0 ; i < CONV3_FILTER; i++){
		for(int j = 0 ; j < CONV3_OUT_SIZE * CONV3_OUT_SIZE; j++){
			int offset = i * CONV3_OUT_SIZE * CONV3_OUT_SIZE + j;
			output[offset] = prelu(output[offset] + bias[i], prelu_weight[i]);
		}
	}

	return;
	
}

void flatten_accel(float* input, float* output){
//#pragma HLS INLINE off
	// Flatten and transpose matrix
#pragma HLS INTERFACE m_axi port=input offset=slave bundle=gmem0 depth=CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER
#pragma HLS INTERFACE m_axi port=output offset=slave bundle=gmem1 depth=CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER
	for(int filter = 0; filter < CONV3_FILTER; filter++){
		for(int y = 0 ; y < CONV3_OUT_SIZE; y++){
			for(int x = 0 ; x < CONV3_OUT_SIZE; x++){
				int out_offset = filter * CONV3_OUT_SIZE * CONV3_OUT_SIZE + x * CONV3_OUT_SIZE + y;
				int in_offset = filter * CONV3_OUT_SIZE * CONV3_OUT_SIZE + y * CONV3_OUT_SIZE + x;
				output[out_offset] = input[in_offset];			
			}
		}
	}
	return;

}

void dense_1_accel(float* input, float* weights, float* output){
//#pragma HLS INLINE off=false
//#pragma HLS DATAFLOW
	static float bias[128] = {
		0.028152,
		0.185310,
		0.111901,
		0.068037,
		0.151811,
		0.236282,
		0.155981,
		0.067093,
		0.101413,
		0.097420,
		0.162406,
		0.137816,
		0.104510,
		0.005229,
		0.054723,
		0.095778,
		0.189125,
		0.081433,
		0.030344,
		0.280089,
		0.020837,
		0.053477,
		0.123847,
		0.016998,
		0.133530,
		0.077549,
		0.114801,
		0.145139,
		0.044926,
		0.068899,
		0.025072,
		0.005923,
		0.057543,
		0.054857,
		0.196295,
		-0.014474,
		0.048064,
		0.057881,
		0.086525,
		0.114003,
		0.011299,
		0.084070,
		0.186959,
		0.093633,
		0.063776,
		0.069522,
		0.127831,
		0.096987,
		0.059140,
		0.133675,
		0.035483,
		0.062899,
		0.046306,
		0.052668,
		0.110989,
		0.044226,
		0.059784,
		0.035480,
		0.111990,
		-0.050621,
		0.067757,
		0.056344,
		0.095653,
		0.111259,
		0.072414,
		0.077212,
		0.070159,
		0.012460,
		0.079073,
		0.086670,
		0.159299,
		0.048180,
		0.054154,
		0.084286,
		0.175915,
		0.101126,
		-0.046340,
		0.097903,
		-0.024744,
		0.057035,
		0.070395,
		0.054309,
		0.017163,
		0.043033,
		-0.065358,
		0.133492,
		0.227329,
		0.082487,
		0.102738,
		0.140630,
		0.035990,
		0.016368,
		0.155090,
		0.051004,
		0.031001,
		0.052885,
		0.031978,
		0.297016,
		0.017709,
		0.017226,
		0.064047,
		0.031427,
		0.138017,
		0.024478,
		0.079968,
		0.073407,
		0.091525,
		0.128784,
		0.070221,
		0.286992,
		0.135592,
		0.057295,
		0.021591,
		0.241483,
		0.035370,
		0.103791,
		0.068986,
		0.034211,
		0.129336,
		0.067538,
		0.101201,
		0.101749,
		0.060609,
		0.069263,
		0.263829,
		0.167333,
		0.112055,
		0.026185
	};

	static float prelu_weight[128] = {
		-0.069322,
		0.008755,
		0.017228,
		-0.103006,
		-0.072883,
		0.000046,
		-0.080885,
		-0.127678,
		-0.033976,
		-0.076236,
		-0.491719,
		-0.010050,
		-0.067289,
		-0.166725,
		-0.026844,
		-0.072164,
		-0.110661,
		-0.514096,
		-0.017118,
		-0.053660,
		-0.013086,
		-0.074493,
		-0.129509,
		0.003418,
		-0.011484,
		-0.052319,
		-0.126964,
		-0.010573,
		-0.030789,
		-0.150140,
		-0.018743,
		-0.023983,
		-0.024424,
		-0.112937,
		-0.100634,
		-0.061045,
		-0.042892,
		-0.097819,
		-0.327822,
		-0.103791,
		0.005836,
		-0.075858,
		-0.592515,
		-0.038704,
		-0.147825,
		-0.059584,
		-0.142889,
		-0.142054,
		-0.069083,
		-0.179964,
		-0.021239,
		-0.092421,
		-0.101487,
		-0.026658,
		-0.464481,
		-0.036170,
		-0.052414,
		-0.019873,
		-0.147395,
		-0.034633,
		-0.237504,
		-0.064156,
		-0.498374,
		-0.342735,
		-0.036093,
		-0.087192,
		-0.217308,
		-0.086258,
		-0.130106,
		-0.043927,
		-0.065720,
		-0.117307,
		-0.074958,
		-0.090512,
		-0.012835,
		-0.018504,
		-0.029990,
		-0.179308,
		-0.094380,
		-0.082029,
		-0.001843,
		-0.063361,
		-0.111018,
		-0.077256,
		-0.378930,
		-0.250318,
		-0.036377,
		-0.058876,
		-0.116477,
		-0.440725,
		-0.367565,
		-0.545316,
		-0.169822,
		-0.010326,
		-0.105325,
		-0.041977,
		-0.069579,
		-0.667851,
		-0.064564,
		-0.083401,
		-0.085013,
		-0.067936,
		-0.125572,
		-0.019349,
		-0.074833,
		-0.047100,
		-0.134747,
		-0.026030,
		-0.123447,
		0.051741,
		-0.146564,
		-0.519493,
		-0.155793,
		-0.387283,
		-0.035442,
		-0.364970,
		-0.069903,
		-0.395291,
		-0.224203,
		0.033236,
		-0.013676,
		-0.055149,
		-0.028153,
		-0.045857,
		-0.047871,
		-0.188673,
		-0.005807,
		-0.495095
	};
#pragma HLS ARRAY_PARTITION variable=bias type=complete
#pragma HLS ARRAY_PARTITION variable=prelu_weight type=complete

	int in_offset = 0;
	int weight_offset = 0;
	int data_offset = 0;

	// Convolution layer
	ConvFilter:
	for (int filter = 0; filter < FC1_DENSE_SIZE; filter++) {
#pragma HLS UNROLL off=true
#pragma HLS PIPELINE off=true
		ConvY:
		for (int i = 0; i < CONV3_FILTER * CONV3_OUT_SIZE * CONV3_OUT_SIZE; i++) {
#pragma HLS PIPELINE off=false ii=7
#pragma HLS UNROLL off=true
			weight_offset = filter * CONV3_FILTER * CONV3_OUT_SIZE * CONV3_OUT_SIZE + i;
			output[filter] += input[i] * weights[weight_offset];

		}
	}

	for(int i = 0 ; i < FC1_DENSE_SIZE; i++){
		output[i] = prelu(output[i] + bias[i], prelu_weight[i]);
	}

	return;
	
}

void dense_2_1_accel(float* input, /*float* weights,*/ float* output){
//#pragma HLS INLINE off
//#pragma HLS DATAFLOW
	static float bias[2] = {
		-0.094494,
		0.094494,
	};
	static float weights[256] = {
		0.15343183279037476, -0.04493502527475357, -0.015070510096848011, -0.14855919778347015, 0.017488470301032066, -0.013846890069544315, 0.08155681192874908, 0.8365939855575562, -0.02219119481742382, 0.47607263922691345, -0.7743848562240601, -0.017263710498809814, 0.0925767794251442, -0.3156454861164093, 0.006357064936310053, 0.19451920688152313, 0.0601896233856678, -0.8128502368927002, 0.1083720400929451, 0.08216121047735214, 0.07600058615207672, 0.3621208667755127, 0.258690744638443, 0.0488748736679554, 0.44052910804748535, -0.2188168466091156, 0.03180345147848129, 0.014940456487238407, 0.007100991904735565, 0.6283051371574402, 0.1099463403224945, 0.059180039912462234, -0.03836820274591446, -0.1327286958694458, 0.029844054952263832, -0.199930340051651, -0.07506527006626129, -0.12494690716266632, 0.5764698386192322, -0.2095123529434204, 0.049986161291599274, -0.29464536905288696, -0.8587594628334045, 0.06151073798537254, 0.12495934218168259, -0.05598181113600731, -0.11245578527450562, 0.34506136178970337, 0.035560380667448044, -0.3096907436847687, -0.009724362753331661, 0.07848812639713287, -0.031919561326503754, -0.1307033747434616, -0.7523529529571533, 0.016415029764175415, 0.18415477871894836, -0.04810306429862976, 0.4708842933177948, -0.02253626473248005, -0.4799068868160248, -0.1538304090499878, -0.7851336598396301, -0.6173703074455261, 0.05929023399949074, 0.0026931418105959892, 0.4924089312553406, -0.2181365191936493, 0.029208693653345108, 0.22976885735988617, 0.07194025814533234, -0.23609058558940887, 0.21106791496276855, 0.06054869666695595, -0.0036094023380428553, 0.07344494760036469, 0.02894832193851471, 0.4428463876247406, -0.058657605201005936, 0.12356748431921005, -0.03341340273618698, 0.12498050928115845, -0.07001177966594696, 0.03281322866678238, 0.8211405277252197, 0.56825852394104, 0.04884495586156845, 0.06199993938207626, -0.05602702498435974, -0.7532246708869934, 0.6799972653388977, -0.7796342372894287, 0.07748621702194214, 0.025213656947016716, 0.23526714742183685, -0.018599368631839752, -0.027782907709479332, 0.8856214880943298, 0.06622804701328278, 0.05672391504049301, 0.11466815322637558, -0.03468267247080803, 0.25010132789611816, 0.02846585400402546, 0.06571150571107864, 0.041850894689559937, -0.1046011745929718, 0.048909761011600494, -0.29004043340682983, -0.001845163176767528, 0.03277461975812912, -0.7336748242378235, 0.40296033024787903, -0.6812686324119568, -0.012898383662104607, -0.5771864056587219, -0.0026101116091012955, -0.6826260089874268, 0.47538280487060547, -0.0035079545341432095, 0.02934470772743225, -0.003501146798953414, 0.11024384200572968, -0.025226199999451637, 0.04925023391842842, -0.38261592388153076, -0.08870502561330795, -0.7374668717384338, -0.15442229807376862, 0.04503892362117767, 0.014465801417827606, 0.14921239018440247, -0.01864427514374256, 0.013031848706305027, -0.08205905556678772, -0.8366541266441345, 0.021014107391238213, -0.4765482544898987, 0.7747389078140259, 0.016086941584944725, -0.09345592558383942, 0.31573835015296936, -0.005244871135801077, -0.19512701034545898, -0.058698948472738266, 0.8128432035446167, -0.10969816148281097, -0.08140674978494644, -0.07504332810640335, -0.36113694310188293, -0.25910085439682007, -0.048367325216531754, -0.43949252367019653, 0.22007589042186737, -0.0327865406870842, -0.014585470780730247, -0.007549220230430365, -0.6284168362617493, -0.10892345011234283, -0.05975528433918953, 0.037391796708106995, 0.1334652453660965, -0.03125433623790741, 0.1986214518547058, 0.07537766546010971, 0.12506458163261414, -0.5761640071868896, 0.20955342054367065, -0.048852987587451935, 0.29494279623031616, 0.8590816855430603, -0.06189396604895592, -0.12358136475086212, 0.05586601793766022, 0.11239314824342728, -0.3441004455089569, -0.035319387912750244, 0.3093975782394409, 0.009426075033843517, -0.07792679220438004, 0.03299392759799957, 0.13122783601284027, 0.7526075839996338, -0.01656140387058258, -0.18432532250881195, 0.047936566174030304, -0.47003453969955444, 0.022512374445796013, 0.4790813624858856, 0.15402668714523315, 0.7844482064247131, 0.6163711547851562, -0.059396736323833466, -0.003585770493373275, -0.4912889301776886, 0.21956659853458405, -0.02883180044591427, -0.2305723875761032, -0.07182617485523224, 0.2370036095380783, -0.21093545854091644, -0.06156916916370392, 0.0019656484946608543, -0.07204101234674454, -0.02833142876625061, -0.44235238432884216, 0.05770491808652878, -0.12331388145685196, 0.03388595953583717, -0.12445692718029022, 0.06993304938077927, -0.032575685530900955, -0.8211132287979126, -0.5682511925697327, -0.048350926488637924, -0.062085412442684174, 0.056223075836896896, 0.7528831958770752, -0.6791343688964844, 0.7794609069824219, -0.07776161283254623, -0.024416862055659294, -0.23636960983276367, 0.01915684901177883, 0.028569288551807404, -0.8852367401123047, -0.0653911679983139, -0.05546794459223747, -0.1145349070429802, 0.034669920802116394, -0.25040027499198914, -0.028601273894309998, -0.06439659744501114, -0.042237184941768646, 0.10402283817529678, -0.04973921179771423, 0.2900778651237488, 0.0019792674575001, -0.03259047493338585, 0.734024167060852, -0.40360382199287415, 0.6810694932937622, 0.012725346721708775, 0.5769413113594055, 0.0036824061535298824, 0.6826574802398682, -0.4764222502708435, 0.004149645566940308, -0.030440472066402435, 0.0037038761656731367, -0.11198407411575317, 0.026209332048892975, -0.05062210559844971, 0.382510781288147, 0.08801477402448654, 0.7379751801490784
	};
#pragma HLS ARRAY_PARTITION variable=bias type=complete
#pragma HLS ARRAY_PARTITION variable=weights type=complete

    float sum = 0;
    int in_offset = 0;
    int weight_offset = 0;
    int data_offset = 0;

	// Convolution layer
    ConvFilter:
	for (int filter = 0; filter < FC2_1_DENSE_SIZE; filter++) {
//#pragma HLS UNROLL off=true
//#pragma HLS PIPELINE off=true
		ConvY:
		for (int i = 0; i < FC1_DENSE_SIZE ;i++) {
#pragma HLS PIPELINE off=false ii=10
//#pragma HLS UNROLL off=true
			weight_offset = filter * FC1_DENSE_SIZE + i;
			output[filter] += input[i] * weights[weight_offset];

		}
//		output[filter] = sum + bias[filter];
//		sum = 0;
	}

	for(int i = 0 ; i < FC2_1_DENSE_SIZE; i++){
		output[i] += bias[i];
	}
	return;
	
}

void dense_2_2_accel(float* input, /*float* weights,*/ float* output){
//#pragma HLS INLINE off
//#pragma HLS DATAFLOW
	static float bias[4] = {
		0.020075,
		-0.108697,
		-0.136590,
		-0.055201
	};
	static float weights[512] = {
		-0.1337861865758896, -0.15335485339164734, -0.0035563830751925707, 0.00834414642304182, -0.0017799705965444446, 0.08976752310991287, 0.11483193933963776, -0.038662541657686234, -0.05562598630785942, 0.1047263815999031, 0.008569744415581226, 0.0005107761244289577, -0.052026376128196716, 0.017414024099707603, -0.17226941883563995, -0.13071559369564056, 0.011569730006158352, 0.012002899311482906, 0.015566342510282993, 0.056260354816913605, -0.04676850512623787, 0.004503436852246523, 0.02208220399916172, 0.12845918536186218, 0.04467342048883438, 0.02431594952940941, -0.0474240817129612, 0.022293994203209877, -0.18174172937870026, 0.048255760222673416, -0.028467556461691856, -0.22194288671016693, 0.023103652521967888, 0.11009444296360016, 0.10775855928659439, 0.0029076647479087114, -0.12587004899978638, -0.0693308636546135, -0.08732499927282333, 0.0034822076559066772, -0.2113676816225052, -0.0638636127114296, 0.0050686318427324295, -0.096319779753685, 0.042775653302669525, 0.10274782031774521, -0.12171848118305206, 0.21008962392807007, -0.09140767902135849, -0.0006837526452727616, -0.08839625865221024, -0.3588826656341553, 0.017779288813471794, 0.0897923931479454, 0.02934427186846733, -0.0739012211561203, 0.04245935007929802, 0.14132331311702728, -0.05709659680724144, -0.009930660016834736, -0.0033678319305181503, -0.05394402891397476, 0.020727062597870827, 0.024817993864417076, 0.11638735979795456, 0.027193890884518623, 0.018533820286393166, 0.021652670577168465, -0.1010432168841362, 0.09298655390739441, -0.00932176411151886, -0.0760587751865387, 0.007006922271102667, -0.11290650069713593, -0.0975562110543251, 0.06349679082632065, 0.025862932205200195, 0.15856055915355682, -0.1339072287082672, -0.10167419165372849, -0.14450863003730774, -0.061913955956697464, -0.17208035290241241, -0.027267858386039734, -0.041599348187446594, 0.03895745053887367, 0.08253207057714462, -0.10123597085475922, -0.015977025032043457, 0.016181020066142082, -0.027954524382948875, 0.00803021714091301, -0.018770182505249977, -0.2535801827907562, -0.18464624881744385, 0.0855700746178627, -0.06009213998913765, 0.00395431462675333, 0.10322271287441254, -0.11189479380846024, 0.07530474662780762, 0.0338527113199234, 0.045943211764097214, 0.009058495983481407, 0.06315761804580688, -0.1219562366604805, 0.38911113142967224, -0.05402999743819237, 0.023124653846025467, 0.06527981162071228, 0.08049487322568893, 0.011582511477172375, -0.05598689615726471, 0.03233827278017998, -0.049266647547483444, -0.0004993361071683466, 0.11956995725631714, -0.00938504934310913, -0.06254060566425323, -0.08777826279401779, -0.025594789534807205, 0.25724655389785767, -0.029416318982839584, -0.23356223106384277, -0.034263916313648224, 0.0055830818600952625, -0.015961024910211563, 0.00396239198744297, -0.09544777870178223, -0.05519463121891022, 0.1428859382867813, -0.08846789598464966, -0.12756748497486115, 0.0037077851593494415, 0.3157566487789154, -0.03382541239261627, -0.06860335916280746, -0.09743671119213104, 0.001971264835447073, 0.1887325644493103, 0.033098939806222916, 0.007019277662038803, -0.06654570996761322, -0.31209391355514526, 0.03827514871954918, 0.0643656998872757, 0.12617745995521545, -0.019364722073078156, -0.02374936081469059, 0.01983772963285446, 0.013005123473703861, -0.15258756279945374, 0.04367367923259735, 0.08696497231721878, -0.1753361076116562, 0.07827556878328323, -0.01555803045630455, 0.13308002054691315, 0.07302147895097733, -0.17542994022369385, 0.003309774212539196, -0.09454244375228882, 0.0721055194735527, -0.021823996677994728, 0.09243517369031906, -0.07392771542072296, 0.010312405414879322, 0.025926057249307632, -0.14228558540344238, -0.17033886909484863, 0.007290658541023731, -0.07582812011241913, -0.09527545422315598, -0.09247918426990509, -0.3226681351661682, 0.09607069939374924, -0.05015702545642853, -0.06417807191610336, 0.04767152667045593, -0.026565441861748695, 0.09160517156124115, -0.04370812699198723, 0.031888771802186966, -0.10956766456365585, -0.011485986411571503, -0.16674937307834625, -0.00392686715349555, 0.07695132493972778, -0.03294152393937111, 0.04866843298077583, -0.00037563437945209444, 0.016298480331897736, -0.1602892279624939, 0.08096922188997269, 0.0807424858212471, 0.024030514061450958, 0.11833139508962631, 0.2757849395275116, -0.05401800572872162, -0.018153754994273186, -0.11889176815748215, -0.15005303919315338, 0.06364543735980988, 0.03666459769010544, -0.016043223440647125, 0.11638510972261429, 0.012291442602872849, 0.2058899700641632, 0.02324502356350422, -0.2009168565273285, -0.1364647001028061, -0.30543333292007446, -0.059606779366731644, 0.04395388066768646, 0.11694607138633728, -0.13071128726005554, 0.07509757578372955, 0.03381624072790146, -0.017200248315930367, -0.0022859671153128147, 0.07126541435718536, -0.13840939104557037, -0.3330651521682739, 0.043176375329494476, -0.11545723676681519, 0.023643556982278824, -0.16508053243160248, -0.5120184421539307, 0.023527130484580994, 0.31114694476127625, 0.05922525003552437, 0.02426024340093136, -0.003941794391721487, -0.1126609519124031, 0.11915156990289688, -0.04217833653092384, -0.0068198502995073795, -0.014707906171679497, 0.022729309275746346, 0.005268890410661697, -0.12294653058052063, 0.07045599818229675, -0.01216813176870346, -0.011266106739640236, 0.03408164530992508, 0.011613819748163223, -0.2139005959033966, 0.04023818299174309, 0.1229730024933815, 0.21325638890266418, 0.011021764017641544, -0.16519013047218323, 0.03157283365726471, -0.0025247500743716955, 0.0021254958119243383, -0.034462787210941315, 0.2524660527706146, -0.0010957737686112523, 0.04959415644407272, 0.1043340340256691, -0.024297449737787247, 0.0349264033138752, -0.08147744089365005, 0.03191966563463211, 0.1089649572968483, 0.09387123584747314, -0.007745143957436085, -0.009555961936712265, -0.03401000425219536, -0.09124631434679031, 0.020684311166405678, -0.07096430659294128, -0.009945137426257133, -0.018653137609362602, -0.04969523847103119, 0.08749397844076157, 0.1953601837158203, 0.001605546334758401, -0.11697722226381302, 0.13997524976730347, -0.0036033433862030506, 0.05906666815280914, 0.08586610853672028, -0.009838766418397427, -0.0675562396645546, 0.00419220793992281, -0.08253005892038345, -0.006378511432558298, 0.13704927265644073, 0.14847762882709503, -0.04660797491669655, 0.016126852482557297, -0.008827137760818005, 0.11399385333061218, -0.05551602691411972, 0.03850669041275978, -0.07074592262506485, 0.10529297590255737, -0.04897800460457802, -0.033093471080064774, 0.4278915822505951, 0.21749792993068695, 0.06601481884717941, 0.03149610012769699, 0.12340943515300751, 0.016290124505758286, -0.04422873631119728, -0.06486081331968307, -0.06247399002313614, -0.00601995037868619, 0.0028399373404681683, 0.04291258379817009, -0.0106208436191082, 0.24590164422988892, -0.09084322303533554, 0.0018979855813086033, 0.007498696446418762, -0.0014124662848189473, -0.015706835314631462, -0.010829959064722061, 0.1890140324831009, -0.24393931031227112, -0.009299349039793015, -0.012414013966917992, 0.1564256101846695, -0.19670362770557404, 0.009353420697152615, 0.021265093237161636, 0.19954609870910645, 0.1296847015619278, -0.12903150916099548, 0.26115500926971436, -0.060779981315135956, -0.022954238578677177, -0.216827392578125, -0.035358790308237076, 0.06475453078746796, 0.10138168185949326, -0.063235804438591, 0.08799803256988525, 0.05229884013533592, -0.033778466284275055, 0.008558455854654312, 0.08012274652719498, -0.2815198004245758, -0.004897433333098888, -0.05222136899828911, -0.025682538747787476, -0.11195112764835358, -0.06034507602453232, 0.154087096452713, 0.03001978248357773, 0.02393110655248165, 0.009813579730689526, 0.21221444010734558, 0.09823505580425262, -0.14240050315856934, -0.09892980009317398, 0.07081964612007141, -0.004158732946962118, -0.05013147369027138, 0.0007883170619606972, 0.03810717165470123, 0.006285484414547682, -0.0003159928892273456, 0.03882070258259773, -0.14850172400474548, -0.03327666595578194, 0.0870947316288948, -0.027868570759892464, -0.02362995408475399, -0.03168350085616112, -0.1324818730354309, -0.030657026916742325, 0.03955630585551262, -0.01646760292351246, 0.06157781183719635, -0.14547108113765717, 0.014712987467646599, -0.12498719990253448, 0.012365362606942654, 0.027928071096539497, 0.024392232298851013, 0.01213659904897213, 0.20397381484508514, -0.026175374165177345, 0.004502111580222845, 0.18355593085289001, -0.19631680846214294, 0.22751827538013458, 0.014007888734340668, 0.06018965318799019, 0.009139129891991615, -0.12960556149482727, -0.028363721445202827, 0.03046974167227745, 0.01935725286602974, -0.1375323385000229, 0.03136279806494713, -0.2297092229127884, -0.01676551066339016, -0.0019696145318448544, 0.03242945298552513, -0.011927356943488121, 0.14344096183776855, -0.05538303405046463, -0.15110555291175842, 0.09409046918153763, 0.04465635120868683, 0.0030353725887835026, 0.01382542122155428, -0.011341553181409836, 0.19074100255966187, 0.06291868537664413, 0.04804655537009239, 0.09562395513057709, 0.045066673308610916, -0.0025290269404649734, -0.09577760845422745, 0.02006981149315834, 0.0712958425283432, 0.05824359133839607, 0.035973068326711655, 0.12630775570869446, -0.04669083654880524, 0.10258493572473526, -0.05352840572595596, -0.0047066593542695045, 0.25489285588264465, -0.06374504417181015, -0.01835002563893795, -0.009103534743189812, 0.2683252990245819, 0.004738297313451767, 0.09206289052963257, 0.24972210824489594, 0.021197477355599403, -0.046108074486255646, -0.010871396400034428, -0.0038785068318247795, -0.13508881628513336, 0.037357427179813385, -0.11627199500799179, 0.0759652853012085, 0.004326325841248035, 0.154430091381073, -0.04836452379822731, -0.02658933214843273, -0.019951002672314644, -0.15990926325321198, 0.062431495636701584, 0.005528120789676905, 0.5187352895736694, -0.027901416644454002, -0.016209248453378677, 0.07319490611553192, 0.055594176054000854, 0.2821764051914215, 0.010331230238080025, 0.2214534431695938, 0.041770875453948975, -0.10543278604745865, -0.08687937259674072, 0.2659381031990051, -0.05690250173211098, 0.03869691118597984, 0.16194182634353638, -0.187827929854393, 0.07486901432275772, -0.02486857958137989, 0.0004076765908394009, 0.13190190494060516, -0.1551908701658249, -0.001634490443393588, 0.027667267248034477, -0.04794137924909592, -0.04589081183075905, -0.03577852621674538, 0.11766230314970016, -0.09194818884134293, -0.031849198043346405, 0.03253500908613205, 0.047631267458200455, -0.19253888726234436, -0.2589823603630066, 0.16941311955451965, 0.05943991243839264, 0.009898309595882893, -0.14352236688137054, 0.20387551188468933, -0.2059081792831421, 0.05948078632354736, -0.06788161396980286, 0.06409276276826859, -0.3704266846179962, -0.035676147788763046, 0.11175215989351273, -0.023191137239336967, 0.16558125615119934, -0.017381731420755386, -0.14014063775539398, -0.01235397718846798, -0.025492357090115547, 0.08434803038835526, 0.0943613052368164, -0.20193564891815186, 0.07983262091875076, 0.04018934443593025, 0.07792974263429642, 0.00019319199782330543, -0.035615965723991394, -0.025467075407505035
	};
#pragma HLS ARRAY_PARTITION variable=bias type=complete
#pragma HLS ARRAY_PARTITION variable=weights type=complete

    int in_offset = 0;
    int weight_offset = 0;
    int data_offset = 0;

	// Convolution layer
    ConvFilter:
	for (int filter = 0; filter < FC2_2_DENSE_SIZE; filter++) {
//#pragma HLS UNROLL off=true
//#pragma HLS PIPELINE off=true
		ConvY:
		for (int i = 0; i < FC1_DENSE_SIZE ;i++) {
#pragma HLS PIPELINE off=false ii=10
#pragma HLS UNROLL off=true
			weight_offset = filter * FC1_DENSE_SIZE + i;
			output[filter] += input[i] * weights[weight_offset];

		}
//		output[filter] = sum + bias[filter];
//		sum = 0;
	}

	for(int i = 0 ; i < FC2_2_DENSE_SIZE; i++){
		output[i] += bias[i];
	}
	return;
	
}

void rnet_accel(float* input, float* conv_mp_2_weights, float* conv_3_weights, float* dense_1_weights, float* output1, float* output2){
#pragma HLS INTERFACE m_axi port=input offset=slave bundle=gmem0 depth=INPUT_SIZE * INPUT_SIZE * CONV1_IN_CHANNEL
#pragma HLS INTERFACE m_axi port=conv_mp_2_weights bundle=gmem1 depth=CONV2_SIZE * CONV2_SIZE * CONV2_FILTER * CONV2_IN_CHANNEL
#pragma HLS INTERFACE m_axi port=conv_3_weights bundle=gmem2 depth=CONV3_SIZE * CONV3_SIZE * CONV3_FILTER * CONV3_IN_CHANNEL
#pragma HLS INTERFACE m_axi port=dense_1_weights bundle=gmem3 depth=FC1_DENSE_SIZE * CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER
#pragma HLS INTERFACE m_axi port=output1 offset=slave bundle=gmem4 depth = FC2_1_DENSE_SIZE
#pragma HLS INTERFACE m_axi port=output2 offset=slave bundle=gmem5 depth = FC2_2_DENSE_SIZE
//#pragma HLS DATAFLOW
	float out1[POOL1_OUT_SIZE * POOL1_OUT_SIZE * CONV1_FILTER] = {0};
	float out2[POOL2_OUT_SIZE * POOL2_OUT_SIZE * CONV2_FILTER] = {0};
	float out3[CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER] = {0};
	float flatten_out[CONV3_OUT_SIZE * CONV3_OUT_SIZE * CONV3_FILTER] = {0};
	float out4[FC1_DENSE_SIZE] = {0};

	conv_mp_1_accel(input, /*weights,*/ out1);
	conv_mp_2_accel(out1, conv_mp_2_weights, out2);
	conv_3_accel(out2, conv_3_weights, out3);
	flatten_accel(out3, flatten_out);
	dense_1_accel(flatten_out, dense_1_weights, out4);
	dense_2_1_accel(out4, /*weight,*/ output1);
	dense_2_2_accel(out4, /*weight,*/ output2);

};
